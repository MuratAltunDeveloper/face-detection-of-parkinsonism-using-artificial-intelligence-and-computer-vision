{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyP2092GHFAJjQRBqbwu9vrU"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OPjJjYih03xg","executionInfo":{"status":"ok","timestamp":1733647199751,"user_tz":-180,"elapsed":21745,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"670d18e9-1b7e-4c67-aec7-a856d59f141f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive  # google.colab modülünü içe aktarın\n","drive.mount('/content/drive')  # Google Drive'ı bağlayın\n","import os"]},{"cell_type":"markdown","source":["Veriyi İçe Aktardım ve etiketledim"],"metadata":{"id":"5g1sY5ut2dIu"}},{"cell_type":"code","source":["import os\n","from PIL import Image\n","import numpy as np\n","\n","# Klasör yolları\n","parkinson_output_folder = '/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/CNN_BASED_YUZBILGI_EDINIM/just_face_PD'\n","healthy_output_folder = '/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/CNN_BASED_YUZBILGI_EDINIM/just_face_healthy'\n","\n","# Veriyi ve etiketleri listeledim\n","def load_images_and_labels(folder, label):\n","    data = []\n","    for file_name in os.listdir(folder):\n","        image_path = os.path.join(folder, file_name)\n","        if image_path.endswith(('.jpg', '.png', '.jpeg')):  # Geçerli formatlar\n","            data.append((image_path, label))\n","    return data\n","\n","# Sağlıklı ve Parkinsonlu bireyler için veri\n","healthy_data = load_images_and_labels(healthy_output_folder, label=0)\n","parkinson_data = load_images_and_labels(parkinson_output_folder, label=1)\n","\n","# Verileri birleştir\n","data = healthy_data + parkinson_data\n","np.random.shuffle(data)"],"metadata":{"id":"tL2atkXi2cO6"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Aşağıdaki yazdığım kod, Parkinsonlu ve sağlıklı bireylerin yüzlerinden ResNet modelini fine-tuning yaparak daha iyi özellikler çıkarmak ve sınıflandırmak için optimizedir. Bu kod, yüzlerin daha anlamlı temsillerini elde etmek amacıyla ResNet-50'yi yeniden eğitir."],"metadata":{"id":"xKtB8yDG42oQ"}},{"cell_type":"code","source":["import os\n","from PIL import Image\n","import numpy as np\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torchvision import models, transforms\n","from torch.utils.data import Dataset, DataLoader\n","from sklearn.model_selection import train_test_split"],"metadata":{"id":"5LCImeJL2cRt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","# pd Dataset sınıfı\n","class ParkinsonDataset(Dataset):\n","    def __init__(self, data, transform):\n","        self.data = data\n","        self.transform = transform\n","\n","    def __len__(self):\n","        return len(self.data)\n","\n","    def __getitem__(self, idx):\n","        image_path, label = self.data[idx]\n","        image = Image.open(image_path).convert(\"RGB\")\n","        image = self.transform(image)\n","        return image, label\n"],"metadata":{"id":"elZ8flt42cUS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["dönüşüm ve data kısmı"],"metadata":{"id":"213YKCiG6TEm"}},{"cell_type":"code","source":["\n","# Görüntü dönüşümleri\n","transform = transforms.Compose([\n","    transforms.Resize((224, 224)),  # ResNet giriş boyutu\n","    transforms.ToTensor(),\n","    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])  # ImageNet normalizasyonu\n","])\n","\n","# Veriyi eğitim ve test olarak ayır\n","train_data, test_data = train_test_split(data, test_size=10, random_state=42)\n","\n","# Dataset ve DataLoader\n","train_dataset = ParkinsonDataset(train_data, transform)\n","test_dataset = ParkinsonDataset(test_data, transform)\n","\n","train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n","test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)\n"],"metadata":{"id":"ItIduolx2ch7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","# ResNet modelini yükle ve son katmanı değiştir\n","model = models.resnet50(pretrained=True)\n","num_features = model.fc.in_features\n","model.fc = nn.Linear(num_features, 2)  # 2 sınıf (Parkinson/Sağlıklı)\n","\n","# GPU desteği kontrolü\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","model = model.to(device)\n","\n","# Loss fonksiyonu ve optimizer\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.Adam(model.parameters(), lr=0.0001)  # Daha düşük öğrenme oranı\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DL0ce-hz2ck7","executionInfo":{"status":"ok","timestamp":1733647216826,"user_tz":-180,"elapsed":1542,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"db28d32f-64ae-4e00-8217-7fa79bfe8435"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n","Downloading: \"https://download.pytorch.org/models/resnet50-0676ba61.pth\" to /root/.cache/torch/hub/checkpoints/resnet50-0676ba61.pth\n","100%|██████████| 97.8M/97.8M [00:00<00:00, 147MB/s]\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n"],"metadata":{"id":"-d2V2kRN2cnn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","# Early Stopping parametreleri\n","early_stopping_patience = 4  # Erken durdurma için beklenen epoch sayısı\n","best_val_loss = float('inf')  # En iyi validation kaybını takip et\n","patience_counter = 0\n","\n","epochs = 11 # Maksimum epoch sayısı\n","best_model_state = None  # En iyi modelin durumunu saklama\n","\n","for epoch in range(epochs):\n","    model.train()\n","    running_loss = 0.0\n","    correct = 0\n","    total = 0\n","\n","    # Eğitim\n","    for inputs, labels in train_loader:\n","        inputs, labels = inputs.to(device), torch.tensor(labels).to(device)\n","\n","        optimizer.zero_grad()\n","        outputs = model(inputs)\n","        loss = criterion(outputs, labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        running_loss += loss.item()\n","        _, predicted = outputs.max(1)\n","        total += labels.size(0)\n","        correct += predicted.eq(labels).sum().item()\n","\n","    train_accuracy = 100. * correct / total\n","    train_loss = running_loss / len(train_loader)\n","\n","    # Validation/Test\n","    model.eval()\n","    test_loss = 0.0\n","    correct = 0\n","    total = 0\n","    all_labels = []\n","    all_predictions = []\n","    with torch.no_grad():\n","        for inputs, labels in test_loader:\n","            inputs, labels = inputs.to(device), torch.tensor(labels).to(device)\n","            outputs = model(inputs)\n","            loss = criterion(outputs, labels)\n","            test_loss += loss.item()\n","\n","            _, predicted = outputs.max(1)\n","            total += labels.size(0)\n","            correct += predicted.eq(labels).sum().item()\n","\n","            all_labels.extend(labels.cpu().numpy())\n","            all_predictions.extend(predicted.cpu().numpy())\n","\n","    test_accuracy = 100. * correct / total\n","    test_loss /= len(test_loader)\n","\n","    print(f\"Epoch {epoch+1}/{epochs}, Train Loss: {train_loss:.4f}, Train Accuracy: {train_accuracy:.2f}%\")\n","    print(f\"Test Loss: {test_loss:.4f}, Test Accuracy: {test_accuracy:.2f}%\")\n","\n","    # Early Stopping kontrolü\n","    if test_loss < best_val_loss:\n","        best_val_loss = test_loss\n","        patience_counter = 0\n","        best_model_state = model.state_dict()  # En iyi modeli kaydet\n","    else:\n","        patience_counter += 1\n","\n","    if patience_counter >= early_stopping_patience:\n","        print(\"Erken durdurma tetiklendi.\")\n","        break\n","\n","# En iyi modelin durumu yüklenir\n","if best_model_state:\n","    model.load_state_dict(best_model_state)\n","\n","# Modelin kaydedilmesi\n","torch.save(model.state_dict(), \"/content/drive/My Drive/ASISTLAB_ARTIFICAL/tubitak_2209/CNN_BASED_YUZBILGI_EDINIM/parkinson_fine_tuned_resnet50.pth\")\n","print(\"Model başarıyla kaydedildi.\")\n","\n","# Confusion Matrix\n","cm = confusion_matrix(all_labels, all_predictions)\n","disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=[\"Healthy\", \"Parkinson\"])\n","disp.plot(cmap=plt.cm.Blues)\n","plt.title(\"Confusion Matrix\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":982},"id":"qjpuGRnw2cqH","executionInfo":{"status":"ok","timestamp":1733647942358,"user_tz":-180,"elapsed":725535,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"95c50756-7ccf-430f-882d-efb2808d1d43"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-8-b76169854eb3>:17: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  inputs, labels = inputs.to(device), torch.tensor(labels).to(device)\n","<ipython-input-8-b76169854eb3>:42: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  inputs, labels = inputs.to(device), torch.tensor(labels).to(device)\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/11, Train Loss: 0.0444, Train Accuracy: 98.53%\n","Test Loss: 0.0001, Test Accuracy: 100.00%\n","Epoch 2/11, Train Loss: 0.0004, Train Accuracy: 100.00%\n","Test Loss: 0.0000, Test Accuracy: 100.00%\n","Epoch 3/11, Train Loss: 0.0002, Train Accuracy: 100.00%\n","Test Loss: 0.0000, Test Accuracy: 100.00%\n","Epoch 4/11, Train Loss: 0.0001, Train Accuracy: 100.00%\n","Test Loss: 0.0000, Test Accuracy: 100.00%\n","Epoch 5/11, Train Loss: 0.0001, Train Accuracy: 100.00%\n","Test Loss: 0.0000, Test Accuracy: 100.00%\n","Epoch 6/11, Train Loss: 0.0001, Train Accuracy: 100.00%\n","Test Loss: 0.0000, Test Accuracy: 100.00%\n","Epoch 7/11, Train Loss: 0.0001, Train Accuracy: 100.00%\n","Test Loss: 0.0000, Test Accuracy: 100.00%\n","Epoch 8/11, Train Loss: 0.0001, Train Accuracy: 100.00%\n","Test Loss: 0.0000, Test Accuracy: 100.00%\n","Epoch 9/11, Train Loss: 0.0000, Train Accuracy: 100.00%\n","Test Loss: 0.0000, Test Accuracy: 100.00%\n","Epoch 10/11, Train Loss: 0.0001, Train Accuracy: 100.00%\n","Test Loss: 0.0000, Test Accuracy: 100.00%\n","Epoch 11/11, Train Loss: 0.0000, Train Accuracy: 100.00%\n","Test Loss: 0.0000, Test Accuracy: 100.00%\n","Model başarıyla kaydedildi.\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"zV_0UVML2csb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"y1lRT8UE2cu7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"ft-bh0GB2cxs"},"execution_count":null,"outputs":[]}]}