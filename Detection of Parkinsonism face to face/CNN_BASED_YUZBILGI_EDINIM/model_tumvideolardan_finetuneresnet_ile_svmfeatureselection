{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN5sNHQMah3KMatEuGRBGoK"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"kZ1nefLTNIxl"},"outputs":[],"source":[]},{"cell_type":"markdown","source":["drive bağlanma"],"metadata":{"id":"j6ILNNQROGLR"}},{"cell_type":"code","source":["from google.colab import drive  # google.colab modülünü içe aktarın\n","drive.mount('/content/drive')  # Google Drive'ı bağlayın\n","import os"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KsviXb3dNRkI","executionInfo":{"status":"ok","timestamp":1733677602153,"user_tz":-180,"elapsed":109654,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"247cd9cb-8ac2-42af-88e0-2f861ae8ba24"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","source":["Library"],"metadata":{"id":"a9MBNh9wOKYF"}},{"cell_type":"code","source":["import os\n","import numpy as np\n","import torch\n","import cv2\n","from torchvision import models, transforms\n","from PIL import Image\n","from sklearn.feature_selection import RFE\n","from sklearn.svm import SVC\n","import matplotlib.pyplot as plt\n"],"metadata":{"id":"trT_X58rNRm5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["model"],"metadata":{"id":"05qWXOPPmRV7"}},{"cell_type":"code","source":["# ResNet50 modelini ve dönüşümleri hazırla\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","model = models.resnet50(pretrained=False)\n","model.fc = torch.nn.Linear(model.fc.in_features, 2)\n","model.load_state_dict(torch.load(\"/content/drive/My Drive/ASISTLAB_ARTIFICAL/tubitak_2209/CNN_BASED_YUZBILGI_EDINIM/parkinson_fine_tuned_resnet50.pth\", map_location=device))\n","model.eval()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sNHbH5GbViMx","executionInfo":{"status":"ok","timestamp":1733677624901,"user_tz":-180,"elapsed":7600,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"2101d093-2408-42c3-975d-cddeb2925b0e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=None`.\n","  warnings.warn(msg)\n","<ipython-input-3-8fd81b198d32>:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  model.load_state_dict(torch.load(\"/content/drive/My Drive/ASISTLAB_ARTIFICAL/tubitak_2209/CNN_BASED_YUZBILGI_EDINIM/parkinson_fine_tuned_resnet50.pth\", map_location=device))\n"]},{"output_type":"execute_result","data":{"text/plain":["ResNet(\n","  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n","  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  (relu): ReLU(inplace=True)\n","  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","  (layer1): Sequential(\n","    (0): Bottleneck(\n","      (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (downsample): Sequential(\n","        (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (1): Bottleneck(\n","      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","    (2): Bottleneck(\n","      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","  )\n","  (layer2): Sequential(\n","    (0): Bottleneck(\n","      (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (downsample): Sequential(\n","        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n","        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (1): Bottleneck(\n","      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","    (2): Bottleneck(\n","      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","    (3): Bottleneck(\n","      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","  )\n","  (layer3): Sequential(\n","    (0): Bottleneck(\n","      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (downsample): Sequential(\n","        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n","        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (1): Bottleneck(\n","      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","    (2): Bottleneck(\n","      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","    (3): Bottleneck(\n","      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","    (4): Bottleneck(\n","      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","    (5): Bottleneck(\n","      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","  )\n","  (layer4): Sequential(\n","    (0): Bottleneck(\n","      (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (downsample): Sequential(\n","        (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n","        (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (1): Bottleneck(\n","      (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","    (2): Bottleneck(\n","      (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","  )\n","  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n","  (fc): Linear(in_features=2048, out_features=2, bias=True)\n",")"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["\n","# Görüntü ön işleme\n","preprocess = transforms.Compose([\n","    transforms.Resize(256),\n","    transforms.CenterCrop(224),\n","    transforms.ToTensor(),\n","    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n","])"],"metadata":{"id":"nL1kNeDyNRpw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","def extract_features_from_video(video_path):\n","    \"\"\"Videodan özellikleri çıkarır\"\"\"\n","    cap = cv2.VideoCapture(video_path)\n","    features = []\n","\n","    while cap.isOpened():\n","        ret, frame = cap.read()\n","        if not ret:\n","            break\n","\n","        # OpenCV BGR'den RGB'ye dönüşüm\n","        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n","        # PIL Image'e dönüştür\n","        pil_image = Image.fromarray(frame_rgb)\n","\n","        # Ön işleme\n","        input_tensor = preprocess(pil_image)\n","        input_batch = input_tensor.unsqueeze(0)\n","\n","        with torch.no_grad():\n","            output = model(input_batch)\n","\n","        # Feature vector'ü numpy array'e dönüştür\n","        feature_vector = output.squeeze().numpy()\n","        features.append(feature_vector)\n","\n","    cap.release()\n","    # Tüm frame'lerin ortalama feature vector'ü\n","    return np.mean(features, axis=0)\n"],"metadata":{"id":"dwOUr_cdNRsk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","def prepare_dataset(parkinson_dir, healthy_dir):\n","    \"\"\"Dataset hazırlama\"\"\"\n","    features = []\n","    labels = []\n","\n","    # Parkinson hastaları videoları\n","    for video_file in os.listdir(parkinson_dir):\n","        if video_file.endswith(('.mp4', '.avi')):\n","            video_path = os.path.join(parkinson_dir, video_file)\n","            feature_vector = extract_features_from_video(video_path)\n","            features.append(feature_vector)\n","            labels.append(1)  # Parkinson\n","\n","    # Sağlıklı bireyler videoları\n","    for video_file in os.listdir(healthy_dir):\n","        if video_file.endswith(('.mp4', '.avi')):\n","            video_path = os.path.join(healthy_dir, video_file)\n","            feature_vector = extract_features_from_video(video_path)\n","            features.append(feature_vector)\n","            labels.append(0)  # Sağlıklı\n","\n","    return np.array(features), np.array(labels)\n"],"metadata":{"id":"zqwr_dlBNRvo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","def select_top_features(features, labels, n_features=20):\n","    \"\"\"En önemli özellikleri seç\"\"\"\n","    svm = SVC(kernel='linear')\n","    rfe = RFE(estimator=svm, n_features_to_select=n_features)\n","    rfe = rfe.fit(features, labels)\n","\n","    # Seçilen özelliklerin indexleri\n","    selected_features_idx = np.where(rfe.support_)[0]\n","    # Seçilen özelliklerin önem sıralaması\n","    feature_ranking = rfe.ranking_\n","\n","    return selected_features_idx, feature_ranking"],"metadata":{"id":"qVcCpBl7NRyU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def prepare_dataset_from_paths(video_paths):\n","    \"\"\"Belirtilen video yollarından dataset hazırlar.\"\"\"\n","    features = []\n","    labels = []\n","\n","    # Sağlıklı bireyler videoları\n","    for video_path in video_paths[\"healthy\"]:\n","        if video_path.endswith(('.mp4', '.avi')):\n","            feature_vector = extract_features_from_video(video_path)\n","            features.append(feature_vector)\n","            labels.append(0)  # Sağlıklı\n","\n","    # Parkinson hastaları videoları\n","    for video_path in video_paths[\"parkinson\"]:\n","        if video_path.endswith(('.mp4', '.avi')):\n","            feature_vector = extract_features_from_video(video_path)\n","            features.append(feature_vector)\n","            labels.append(1)  # Parkinson\n","\n","    return np.array(features), np.array(labels)\n","\n","def plot_feature_comparison(selected_features, labels, selected_features_idx):\n","    \"\"\"Seçilen özelliklerin Parkinson ve sağlıklı arasındaki farkları görselleştir\"\"\"\n","    # Parkinson ve sağlıklı bireylerin ortalama özellik değerlerini hesapla\n","    parkinson_features = selected_features[labels == 1]  # Parkinson hastaları\n","    healthy_features = selected_features[labels == 0]  # Sağlıklı bireyler\n","\n","    # Her özellik için ortalama değerleri hesapla\n","    parkinson_means = np.mean(parkinson_features, axis=0)\n","    healthy_means = np.mean(healthy_features, axis=0)\n","\n","    # Özellik indekslerini 'f1, f2, ..., f20' şeklinde etiketle\n","    feature_labels = [f\"f{i+1}\" for i in range(len(selected_features_idx))]\n","\n","    # Görselleştirme\n","    x = np.arange(len(feature_labels))  # x ekseni için özelliklerin indeksleri\n","    width = 0.35  # Bar genişliği\n","\n","    # Bar grafik: Parkinson ve sağlıklı ortalamalarını yan yana göster\n","    fig, ax = plt.subplots(figsize=(12, 6))\n","    ax.bar(x - width/2, parkinson_means, width, label='Parkinson', color='r')\n","    ax.bar(x + width/2, healthy_means, width, label='Healthy', color='g')\n","\n","    # Grafik başlık ve etiketler\n","    ax.set_xlabel('Features')\n","    ax.set_ylabel('Average Feature Value')\n","    ax.set_title('Comparison of Top 20 Features for Parkinson and Healthy')\n","    ax.set_xticks(x)\n","    ax.set_xticklabels(feature_labels, rotation=45)\n","    ax.legend()\n","\n","    # Grafiği göster\n","    plt.tight_layout()\n","    plt.show()\n","\n","# Ana fonksiyon\n","def main():\n","    # Video yollarını belirle\n","   # Sağlıklı ve Parkinson videolarının yolları\n","    video_paths = {\n","        \"healthy\": [\n","\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/ali-cebeci-durus-tekayak-1-trim-merged-2_vICXcgYD.mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/bahtiyar-tegun-durus-tekayak-1-trim-merged_4M4vhIE0.mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/hanifi-saglam-durus-tekayak-1-trim-merged-3_MMpNTsmc.mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/cihan-kurt-durus-tekayak-ata-trim-merged_8YDSW17r.mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/ilknur-ustaoglu-durus-tekayak-2-trim-merged-3_gwzE0p7c.mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/hizir-canca-durus-tekayak-3-trim_o9kQzG1m.mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/mehmet-eryigit-durus-tekayak-1-trim-merged_kzLuULsa.mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/hatice-cebeci-durus-tekayak-trim-merged_IDGIqZaw.mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/munip-ozcelik-durus-tekayak-1-trim-merged_Hjs6nKrM.mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/rasim-pamuk-durus-tekayak-ata-trim-merged_qX1eqSBq.mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/salih-zeki-yaman-durus-tekayak-ata-trim-merged-1_7TdJPPmX.mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/turgut-kiraci-durus-tekayak-efe-trim-merged-1_EAjU78OV.mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/sevli-okumus-durus-tekayak-1-trim_RKYEEnXU.mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/yusuf-albayrak-durus-tekayak-8-trim-merged-1_mwGaCEIs.mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/zeki-kahvecioglu-durus-tekayak-2-trim_saJBdXxx.mp4\",\n","\n","\n","        ],\n","        \"parkinson\": [\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/canan-karaman-durus-tekayak-3-trim-merged-1_s9hUjGzM (1).mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/ekrem-sarlayan-durus-tekayak-2-trim-merged-1_Trk5fdSv (1).mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/faruk-tunca-durus-tekayak-3-trim-merged-1_ZkktaE85 (1).mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/gullu-cakmakci-durus-tekayak-1-trim-merged-1_aDeFOjfX (1).mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/halide-hale-ucar-durus-tekayak-2-trim-merged-1_RRKx3svS (1).mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/kamuran-tan-durus-tekayak-1-trim-merged-1_ek1KUtpj (1).mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/naci-sari-durus-tekayak-1-trim-merged_gJEQxmqd (1).mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/necip-gursoy-durus-tekayak-4-trim-merged-2_lFmtSUpW (1).mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/nermin-sari-durus-tekayak-1-trim-merged-1_9VJhuCmq (1).mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/recep-bayhan-durus-tekayak-2-trim-merged-2_7uuOk1tL (1).mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/samime-sever-durus-tekayak-1-trim-merged_sRSRlhDD (2).mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/sebahat-gokgoz-durus-tekayak-1-trim-merged-2_yTT56cSw (2).mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/selver-ozon-durus-tekayak-1-trim-merged-1_C9GX0qlh (1).mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/semiha-yildiz-durus-tekayak-3-trim-merged-1_2dXiAMo8 (1).mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/sahizer-balkan-durus-tekayak-trim-merged-3_a9UZ2MDK (1).mp4\",\n","            \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/yusuf-gokgoz-durus-tekayak-2-trim-merged-2_WEKqbzSA (1).mp4\",\n","        ],\n","    }\n","\n","\n","\n","    # Dataset hazırla\n","    features, labels = prepare_dataset_from_paths(video_paths)\n","\n","    # En önemli 20 özelliği seç\n","    selected_features_idx, feature_ranking = select_top_features(features, labels)\n","\n","    # Seçilen özellikleri kullanarak yeni feature matrix oluştur\n","    selected_features = features[:, selected_features_idx]\n","\n","    # Seçilen özelliklerin Parkinson ve sağlıklı arasındaki farkları görselleştir\n","    plot_feature_comparison(selected_features, labels, selected_features_idx)\n","\n","    return selected_features, labels\n","\n","\n","# Kodu çalıştır\n","if __name__ == \"__main__\":\n","    selected_features, labels = main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":663},"id":"MPU9dLzGNR04","executionInfo":{"status":"ok","timestamp":1733680677973,"user_tz":-180,"elapsed":2477208,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"a127f517-76d1-491a-cf62-068b95588925"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/feature_selection/_rfe.py:291: UserWarning: Found n_features_to_select=20 > n_features=2. There will be no feature selection and all features will be kept.\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"eTknOumQNR3s"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"BauqWWC0NR60"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Rz2Z7-e5NR98"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Gl0kMiaANSBI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"2KazgiJWNSEA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"dU8fdL4jNSHE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"uRZbqTjaNSKF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"flbaZJ9cNSNE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"0LvFJcCkNSQh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"nGnsPL-LNSTQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"S0dg8wHtNSWU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"SAu-TzyYNSZE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Agi-_vXDNSbY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"1fiuko0oNS_Q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"wOasTUOjNTCg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"HLD1jJOzNTFk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"2_u5Q_SkNTIU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"9qyQnIvMNTLU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"eq7kaiQINTOJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"OQWyzfV5NTRa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"1ADXfxxpNTTa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"j2-wKFYFNTWC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"D8eRgP-9NTZD"},"execution_count":null,"outputs":[]}]}