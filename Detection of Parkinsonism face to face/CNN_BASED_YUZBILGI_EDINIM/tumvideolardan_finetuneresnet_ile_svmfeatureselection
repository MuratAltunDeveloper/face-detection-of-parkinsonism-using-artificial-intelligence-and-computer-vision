{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMPc9koJ/Bd3+YDGd7th+3g"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jS6XwwXV13X1","executionInfo":{"status":"ok","timestamp":1733663122002,"user_tz":-180,"elapsed":1966,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"2ae37a77-dc2b-45f3-ccd0-eb6654427583"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive  # google.colab modülünü içe aktarın\n","drive.mount('/content/drive')  # Google Drive'ı bağlayın\n","import os"]},{"cell_type":"markdown","source":["LİBRARY"],"metadata":{"id":"9XHtfVYl-Xeo"}},{"cell_type":"code","source":["import numpy as np\n","import torch\n","import cv2\n","from torchvision import models, transforms\n","from PIL import Image\n","from sklearn.feature_selection import RFE\n","from sklearn.svm import SVC\n","import matplotlib.pyplot as plt"],"metadata":{"id":"mV-m83ZP-SQr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ResNet50 modelini ve dönüşümleri hazırla\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","model = models.resnet50(pretrained=False)\n","model.fc = torch.nn.Linear(model.fc.in_features, 2)\n","model.load_state_dict(torch.load(\"/content/drive/My Drive/ASISTLAB_ARTIFICAL/tubitak_2209/CNN_BASED_YUZBILGI_EDINIM/parkinson_fine_tuned_resnet50.pth\", map_location=device))\n","model.eval()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eJm3bqyd-STe","executionInfo":{"status":"ok","timestamp":1733663122822,"user_tz":-180,"elapsed":822,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"4a36a222-a2c5-49db-efb2-330c7b95059d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=None`.\n","  warnings.warn(msg)\n","<ipython-input-24-8fd81b198d32>:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  model.load_state_dict(torch.load(\"/content/drive/My Drive/ASISTLAB_ARTIFICAL/tubitak_2209/CNN_BASED_YUZBILGI_EDINIM/parkinson_fine_tuned_resnet50.pth\", map_location=device))\n"]},{"output_type":"execute_result","data":{"text/plain":["ResNet(\n","  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n","  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  (relu): ReLU(inplace=True)\n","  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","  (layer1): Sequential(\n","    (0): Bottleneck(\n","      (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (downsample): Sequential(\n","        (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (1): Bottleneck(\n","      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","    (2): Bottleneck(\n","      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","  )\n","  (layer2): Sequential(\n","    (0): Bottleneck(\n","      (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (downsample): Sequential(\n","        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n","        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (1): Bottleneck(\n","      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","    (2): Bottleneck(\n","      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","    (3): Bottleneck(\n","      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","  )\n","  (layer3): Sequential(\n","    (0): Bottleneck(\n","      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (downsample): Sequential(\n","        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n","        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (1): Bottleneck(\n","      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","    (2): Bottleneck(\n","      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","    (3): Bottleneck(\n","      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","    (4): Bottleneck(\n","      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","    (5): Bottleneck(\n","      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","  )\n","  (layer4): Sequential(\n","    (0): Bottleneck(\n","      (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (downsample): Sequential(\n","        (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n","        (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (1): Bottleneck(\n","      (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","    (2): Bottleneck(\n","      (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","  )\n","  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n","  (fc): Linear(in_features=2048, out_features=2, bias=True)\n",")"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["\n","# Aktivasyon haritalarını yakalamak için hook\n","activation_maps = []\n","def get_activation_maps(name):\n","    def hook(model, input, output):\n","        activation_maps.append(output)\n","    return hook\n","\n","model.layer4[2].register_forward_hook(get_activation_maps(\"layer4\"))\n","\n","# Görüntü ön işleme\n","transform = transforms.Compose([\n","    transforms.Resize((224, 224)),\n","    transforms.ToTensor(),\n","    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n","])"],"metadata":{"id":"IMf-l0hl-SWG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","def process_video(video_path, label):\n","    \"\"\"\n","    Videodan özellik haritası vektörleri çıkarır\n","    \"\"\"\n","    all_feature_vectors = []\n","    cap = cv2.VideoCapture(video_path)\n","\n","    while True:\n","        ret, frame = cap.read()\n","        if not ret:\n","            break\n","\n","        # BGR'yi RGB'ye çevir\n","        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n","        image_pil = Image.fromarray(frame_rgb)\n","\n","        # Görüntüyü tensöre dönüştür\n","        input_tensor = transform(image_pil).unsqueeze(0)\n","\n","        # Modelden özellik haritalarını çıkar\n","        with torch.no_grad():\n","            model(input_tensor)\n","\n","        # Son aktivasyon haritasını al\n","        feature_map = activation_maps[-1]\n","\n","        # Özellik haritasından istatistiksel vektör çıkar\n","        mean = feature_map.mean(dim=(2, 3)).cpu().numpy().flatten()\n","        std = feature_map.std(dim=(2, 3)).cpu().numpy().flatten()\n","\n","        # Vektörleri birleştir\n","        feature_vector = np.concatenate([mean, std])\n","        all_feature_vectors.append(feature_vector)\n","\n","    cap.release()\n","\n","    # Videodan çıkarılan vektörlerin ortalamasını al\n","    video_feature_vector = all_feature_vectors, axis=0\n","\n","    return video_feature_vector, label\n"],"metadata":{"id":"THCqGo69-SY2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","def prepare_dataset(video_paths):\n","    \"\"\"\n","    Tüm videolardan veri seti hazırla\n","    \"\"\"\n","    X, y = [], []\n","    for video_path, label in video_paths:\n","        feature_vector, video_label = process_video(video_path, label)\n","        X.append(feature_vector)\n","        y.append(video_label)\n","\n","    return np.array(X), np.array(y)\n"],"metadata":{"id":"YSOFhg74-Sba"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["'''\n","\n","# Sağlıklı ve Parkinson videolarının yolları\n","video_paths = {\n","    \"healthy\": [\n","\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/ali-cebeci-durus-tekayak-1-trim-merged-2_vICXcgYD.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/bahtiyar-tegun-durus-tekayak-1-trim-merged_4M4vhIE0.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/hanifi-saglam-durus-tekayak-1-trim-merged-3_MMpNTsmc.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/cihan-kurt-durus-tekayak-ata-trim-merged_8YDSW17r.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/ilknur-ustaoglu-durus-tekayak-2-trim-merged-3_gwzE0p7c.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/hizir-canca-durus-tekayak-3-trim_o9kQzG1m.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/mehmet-eryigit-durus-tekayak-1-trim-merged_kzLuULsa.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/hatice-cebeci-durus-tekayak-trim-merged_IDGIqZaw.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/munip-ozcelik-durus-tekayak-1-trim-merged_Hjs6nKrM.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/rasim-pamuk-durus-tekayak-ata-trim-merged_qX1eqSBq.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/salih-zeki-yaman-durus-tekayak-ata-trim-merged-1_7TdJPPmX.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/turgut-kiraci-durus-tekayak-efe-trim-merged-1_EAjU78OV.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/sevli-okumus-durus-tekayak-1-trim_RKYEEnXU.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/yusuf-albayrak-durus-tekayak-8-trim-merged-1_mwGaCEIs.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/zeki-kahvecioglu-durus-tekayak-2-trim_saJBdXxx.mp4\",\n","\n","\n","    ],\n","    \"parkinson\": [\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/canan-karaman-durus-tekayak-3-trim-merged-1_s9hUjGzM (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/ekrem-sarlayan-durus-tekayak-2-trim-merged-1_Trk5fdSv (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/faruk-tunca-durus-tekayak-3-trim-merged-1_ZkktaE85 (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/gullu-cakmakci-durus-tekayak-1-trim-merged-1_aDeFOjfX (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/halide-hale-ucar-durus-tekayak-2-trim-merged-1_RRKx3svS (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/kamuran-tan-durus-tekayak-1-trim-merged-1_ek1KUtpj (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/naci-sari-durus-tekayak-1-trim-merged_gJEQxmqd (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/necip-gursoy-durus-tekayak-4-trim-merged-2_lFmtSUpW (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/nermin-sari-durus-tekayak-1-trim-merged-1_9VJhuCmq (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/recep-bayhan-durus-tekayak-2-trim-merged-2_7uuOk1tL (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/samime-sever-durus-tekayak-1-trim-merged_sRSRlhDD (2).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/sebahat-gokgoz-durus-tekayak-1-trim-merged-2_yTT56cSw (2).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/selver-ozon-durus-tekayak-1-trim-merged-1_C9GX0qlh (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/semiha-yildiz-durus-tekayak-3-trim-merged-1_2dXiAMo8 (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/sahizer-balkan-durus-tekayak-trim-merged-3_a9UZ2MDK (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/yusuf-gokgoz-durus-tekayak-2-trim-merged-2_WEKqbzSA (1).mp4\",\n","    ],\n","}\n","\n","\n","\n","\n","'''\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":105},"id":"-wamwwQg-SeC","executionInfo":{"status":"ok","timestamp":1733663122822,"user_tz":-180,"elapsed":6,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"30bd7948-5519-4263-9dec-05cab0da86af"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\n\\n# Sağlıklı ve Parkinson videolarının yolları\\nvideo_paths = {\\n    \"healthy\": [\\n      \\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/ali-cebeci-durus-tekayak-1-trim-merged-2_vICXcgYD.mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/bahtiyar-tegun-durus-tekayak-1-trim-merged_4M4vhIE0.mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/hanifi-saglam-durus-tekayak-1-trim-merged-3_MMpNTsmc.mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/cihan-kurt-durus-tekayak-ata-trim-merged_8YDSW17r.mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/ilknur-ustaoglu-durus-tekayak-2-trim-merged-3_gwzE0p7c.mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/hizir-canca-durus-tekayak-3-trim_o9kQzG1m.mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/mehmet-eryigit-durus-tekayak-1-trim-merged_kzLuULsa.mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/hatice-cebeci-durus-tekayak-trim-merged_IDGIqZaw.mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/munip-ozcelik-durus-tekayak-1-trim-merged_Hjs6nKrM.mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/rasim-pamuk-durus-tekayak-ata-trim-merged_qX1eqSBq.mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/salih-zeki-yaman-durus-tekayak-ata-trim-merged-1_7TdJPPmX.mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/turgut-kiraci-durus-tekayak-efe-trim-merged-1_EAjU78OV.mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/sevli-okumus-durus-tekayak-1-trim_RKYEEnXU.mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/yusuf-albayrak-durus-tekayak-8-trim-merged-1_mwGaCEIs.mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/zeki-kahvecioglu-durus-tekayak-2-trim_saJBdXxx.mp4\",\\n\\n\\n    ],\\n    \"parkinson\": [\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/canan-karaman-durus-tekayak-3-trim-merged-1_s9hUjGzM (1).mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/ekrem-sarlayan-durus-tekayak-2-trim-merged-1_Trk5fdSv (1).mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/faruk-tunca-durus-tekayak-3-trim-merged-1_ZkktaE85 (1).mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/gullu-cakmakci-durus-tekayak-1-trim-merged-1_aDeFOjfX (1).mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/halide-hale-ucar-durus-tekayak-2-trim-merged-1_RRKx3svS (1).mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/kamuran-tan-durus-tekayak-1-trim-merged-1_ek1KUtpj (1).mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/naci-sari-durus-tekayak-1-trim-merged_gJEQxmqd (1).mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/necip-gursoy-durus-tekayak-4-trim-merged-2_lFmtSUpW (1).mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/nermin-sari-durus-tekayak-1-trim-merged-1_9VJhuCmq (1).mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/recep-bayhan-durus-tekayak-2-trim-merged-2_7uuOk1tL (1).mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/samime-sever-durus-tekayak-1-trim-merged_sRSRlhDD (2).mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/sebahat-gokgoz-durus-tekayak-1-trim-merged-2_yTT56cSw (2).mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/selver-ozon-durus-tekayak-1-trim-merged-1_C9GX0qlh (1).mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/semiha-yildiz-durus-tekayak-3-trim-merged-1_2dXiAMo8 (1).mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/sahizer-balkan-durus-tekayak-trim-merged-3_a9UZ2MDK (1).mp4\",\\n        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/yusuf-gokgoz-durus-tekayak-2-trim-merged-2_WEKqbzSA (1).mp4\",\\n    ],\\n}\\n\\n\\n\\n\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["import cv2\n","import numpy as np\n","from sklearn.feature_selection import RFE\n","from sklearn.svm import SVC\n","import matplotlib.pyplot as plt\n","\n","# Videodan özellikleri çıkarmak için bir fonksiyon\n","def analyze_video(video_path):\n","    \"\"\"\n","    Videodan ortalama ve standart sapma değerlerini hesaplar.\n","    Args:\n","        video_path (str): Video dosyasının yolu.\n","    Returns:\n","        tuple: (mean, std) - Ortalama ve standart sapma değerleri\n","    \"\"\"\n","    cap = cv2.VideoCapture(video_path)\n","    if not cap.isOpened():\n","        print(f\"Video açılamadı: {video_path}\")\n","        return None, None\n","\n","    means = []\n","    stds = []\n","\n","    while True:\n","        ret, frame = cap.read()\n","        if not ret:\n","            break\n","        frame_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n","        means.append(np.mean(frame_gray))\n","        stds.append(np.std(frame_gray))\n","\n","    cap.release()\n","\n","    if len(means) == 0 or len(stds) == 0:\n","        return None, None\n","\n","    return np.array(means).mean(), np.array(stds).mean()\n","\n","# Sağlıklı ve Parkinson videolarının yolları\n","video_paths = {\n","    \"healthy\": [\n","\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/ali-cebeci-durus-tekayak-1-trim-merged-2_vICXcgYD.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/bahtiyar-tegun-durus-tekayak-1-trim-merged_4M4vhIE0.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/hanifi-saglam-durus-tekayak-1-trim-merged-3_MMpNTsmc.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/cihan-kurt-durus-tekayak-ata-trim-merged_8YDSW17r.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/ilknur-ustaoglu-durus-tekayak-2-trim-merged-3_gwzE0p7c.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/hizir-canca-durus-tekayak-3-trim_o9kQzG1m.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/mehmet-eryigit-durus-tekayak-1-trim-merged_kzLuULsa.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/hatice-cebeci-durus-tekayak-trim-merged_IDGIqZaw.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/munip-ozcelik-durus-tekayak-1-trim-merged_Hjs6nKrM.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/rasim-pamuk-durus-tekayak-ata-trim-merged_qX1eqSBq.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/salih-zeki-yaman-durus-tekayak-ata-trim-merged-1_7TdJPPmX.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/turgut-kiraci-durus-tekayak-efe-trim-merged-1_EAjU78OV.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/sevli-okumus-durus-tekayak-1-trim_RKYEEnXU.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/yusuf-albayrak-durus-tekayak-8-trim-merged-1_mwGaCEIs.mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/zeki-kahvecioglu-durus-tekayak-2-trim_saJBdXxx.mp4\",\n","\n","\n","    ],\n","    \"parkinson\": [\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/canan-karaman-durus-tekayak-3-trim-merged-1_s9hUjGzM (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/ekrem-sarlayan-durus-tekayak-2-trim-merged-1_Trk5fdSv (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/faruk-tunca-durus-tekayak-3-trim-merged-1_ZkktaE85 (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/gullu-cakmakci-durus-tekayak-1-trim-merged-1_aDeFOjfX (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/halide-hale-ucar-durus-tekayak-2-trim-merged-1_RRKx3svS (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/kamuran-tan-durus-tekayak-1-trim-merged-1_ek1KUtpj (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/naci-sari-durus-tekayak-1-trim-merged_gJEQxmqd (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/necip-gursoy-durus-tekayak-4-trim-merged-2_lFmtSUpW (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/nermin-sari-durus-tekayak-1-trim-merged-1_9VJhuCmq (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/recep-bayhan-durus-tekayak-2-trim-merged-2_7uuOk1tL (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/samime-sever-durus-tekayak-1-trim-merged_sRSRlhDD (2).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/sebahat-gokgoz-durus-tekayak-1-trim-merged-2_yTT56cSw (2).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/selver-ozon-durus-tekayak-1-trim-merged-1_C9GX0qlh (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/semiha-yildiz-durus-tekayak-3-trim-merged-1_2dXiAMo8 (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/sahizer-balkan-durus-tekayak-trim-merged-3_a9UZ2MDK (1).mp4\",\n","        \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/yusuf-gokgoz-durus-tekayak-2-trim-merged-2_WEKqbzSA (1).mp4\",\n","    ],\n","}\n","\n","# Özellik ve etiketleri depolamak için listeler\n","features = []\n","labels = []\n","\n","# Tüm videoları işle ve özellikleri kaydet\n","for label, paths in video_paths.items():\n","    for video_path in paths:\n","        mean, std = analyze_video(video_path)  # Özellik vektörlerini çıkar\n","        if mean is None or std is None:\n","            print(f\"Özellikler çıkarılamadı: {video_path}\")\n","            continue\n","        feature_vector = np.array([mean, std])  # Ortalama ve std'yi birleştir\n","        features.append(feature_vector)\n","        labels.append(0 if label == \"healthy\" else 1)  # Sağlıklı: 0, Parkinson: 1\n","\n","# NumPy dizisine çevir\n","X = np.array(features)  # Özellik vektörleri\n","y = np.array(labels)    # Etiketler\n","\n","# Özellik seçimi için RFE (Recursive Feature Elimination) kullanımı\n","svm_classifier = SVC(kernel='linear')  # Lineer çekirdekli bir SVM sınıflandırıcı\n","rfe_selector = RFE(estimator=svm_classifier, n_features_to_select=10, step=1)\n","rfe_selector = rfe_selector.fit(X, y)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BbfaQJp--Sgy","executionInfo":{"status":"ok","timestamp":1733663179686,"user_tz":-180,"elapsed":56868,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"598b689d-98cb-465c-bc5d-cda401dd18bd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/feature_selection/_rfe.py:291: UserWarning: Found n_features_to_select=10 > n_features=2. There will be no feature selection and all features will be kept.\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["# Özelliklerin en önemli 10 tanesini gösterme\n","selected_features = rfe_selector.support_  # Seçilen özelliklerin boolean maskesi\n","\n","# Seçilen özelliklerin indekslerini alalım\n","important_features = np.where(selected_features)[0]\n","\n","print(\"En önemli 10 özellik (özellik indeksleri):\", important_features)\n","\n","# Özellik vektörlerini sadece en önemli 10 özellik ile güncelle\n","X_selected = X[:, important_features]\n","\n","# Parkinson ve sağlıklı bireyler arasındaki dağılımı görselleştirelim\n","plt.figure(figsize=(10, 6))\n","plt.scatter(X_selected[y == 0, 0], X_selected[y == 0, 1], color='blue', label='Sağlıklı', alpha=0.6)\n","plt.scatter(X_selected[y == 1, 0], X_selected[y == 1, 1], color='red', label='Parkinson', alpha=0.6)\n","\n","plt.title('Sağlıklı ve Parkinson Bireyler Arasındaki Özellik Dağılımı (Seçilen 10 Özellik)')\n","plt.xlabel(f'Özellik {important_features[0] + 1}')  # +1, indeks 0'dan başlar\n","plt.ylabel(f'Özellik {important_features[1] + 1}')  # +1, indeks 0'dan başlar\n","plt.legend()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G8GjEMjU-Sj-","executionInfo":{"status":"ok","timestamp":1733663180164,"user_tz":-180,"elapsed":482,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"ba816f71-3885-44bf-98ac-a9b6b249f892"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["En önemli 10 özellik (özellik indeksleri): [0 1]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAA1IAAAIlCAYAAADfdsnKAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAAB4z0lEQVR4nO3de5zMdf//8efs+cCO8651Zsku0mZLJMKyXIiQwyWHVDqgEF1cfamUS1Q6l1SXQ1FRSK6iHIqQtNHJhpXTOm9rZ9m1a5nP74/PbydjD3bsYfbwuN9ucxvzeb/nM68Zn5n9vD7vk8UwDEMAAAAAgHzzcHcAAAAAAFDakEgBAAAAgItIpAAAAADARSRSAAAAAOAiEikAAAAAcBGJFAAAAAC4iEQKAAAAAFxEIgUAAAAALiKRAgCgmJ05c0YpKSmSpJSUFJ05c8bNEQHIcu7cOf3111+SpPPnzysxMVF2u93NUaEkIpECAKCYRUZG6p///Kck6Z///KciIyPdHBGALGPGjFG9evUkSW+88YaqV6+uw4cPuzkqlEQWwzAMdwcBAEB5smXLFlWoUEEtW7bUzz//rHPnzunWW291d1gAJO3evVunTp3S7bffrsOHD2vv3r1q166d/Pz83B0aShhapOBWEydO1EMPPaRz587pxIkTioqK0v/+9z+nOt98840sFou++eabXPdz8OBBWSwWvfDCC3m+Xn72VR7weeUu67NZsGCBW16/fv36GjFihFteu6y6/fbbdfvtt7v8vKL8ntx6661q2bKlJKlly5bFkkQtWLBAFotFBw8edGy78rPJ6fgfMWKEKlSoUOTxXYvVq1fr5ptv1vHjx5WamqpRo0Zp0qRJV31eTp+Fux05ckR+fn7asmWLu0PJ13FRlkVERDjef926dRUdHV3kSVROn/FTTz0li8XiVO/KvxFZx/KPP/6Y5/4nT56s1q1bF2bIEIkUXPDrr7+qf//+qlevnvz8/FSrVi116dJFr7322jXvc8SIEVqyZIkqVqyomjVrKiMjQx07dizEqEuXrB/ErJufn5+aNGmiMWPG6OTJk+4Or9TK+mOUdfPw8FDNmjXVs2dPff/99+4Oz+0uXbqk0NBQWSwWffnll+4Op8z7/fffdffdd6tWrVry9fVVaGiohgwZot9//93doRW6K797AQEBqlu3rnr16qX58+crIyOjQPvv1KmTzp8/r9DQUFWoUEEff/yxhg8fXkjRF6/p06erdevW2ZLqzz//XB06dFCNGjUUEBCghg0basCAAVqzZo2bIi1ex48f1+TJk9WxY0dVrFjxqhcttm7dqnbt2ikgIEAhISF65JFHdO7cuXy/3l9//aVJkybpuuuuk5+fn6pUqaKYmBitXr26EN6N+4wbN04///yzVq1a5e5QyhQvdweA0mHr1q3q2LGj6tatq/vvv18hISE6cuSIvv/+e73yyisaO3bsNe23efPm2r9/v7Zu3Sp/f3916NBBPj4+hRx96TN9+nQ1aNBA6enp+u677/TWW2/piy++0G+//aaAgIBii6N9+/Y6f/58mfk/eeutt1ShQgXZ7XYdOXJE77zzjtq3b68ffvhBN9xwgySpXr16On/+vLy9vd0bbDHasGGDjh8/rvr162vx4sXq3r27u0MqVVz5nixfvlyDBw9WlSpVdO+996pBgwY6ePCg3nvvPX3yySf66KOPdOeddxZD1DkrquM/67uXkZGho0ePau3atRo5cqRefvllrV69WnXq1Lmm/QYEBCg2Nlbffvutzp8/r7Zt26patWqFGntxOH36tBYuXKiFCxc6bX/hhRc0adIkdejQQVOmTFFAQIDi4+O1bt06ffTRR+rWrVuRxPPVV18VyX6vxZ49ezRr1iw1btxYLVq00LZt23Ktu2vXLnXu3Fnh4eGaM2eOEhIS9MILL2jfvn35uki0Z88ede7cWadPn9Y999yjqKgoJScna/HixerVq5cmTpyo559/vjDfnsv27NkjDw/X20FCQkLUu3dvvfDCC7rjjjuKILLyiUQK+TJjxgxZrVbt2LFDlSpVcio7depUgfZdrVo1vtRX6N69u6KioiRJ9913n6pWrao5c+bos88+0+DBg695v3a7XRcuXMh3fQ8PjzLVJ7x///5OJ1l9+vRR8+bNtWzZMkcildUSeDWpqakKDAwsqlALxcWLF2W32696gv/BBx/oxhtv1PDhw/Xvf/873++tNHwGxSG/35P9+/dr6NChatiwoTZt2qTq1as7yh599FHddtttGjp0qH755Rc1bNiwKEPOVX6Pf1dd+d2bNm2aFi9erGHDhumuu+4qUMuwj4+PunTpUhhhus0HH3wgLy8v9erVy7Ht4sWLeuaZZ9SlS5ccE5uC/u3NS0m6eNaqVSv99ddfqlKlij755BPdddddudb997//rcqVK+ubb75RUFCQJLMr3P3336+vvvpKXbt2zfW5mZmZ6t+/v86cOaNNmzY5dYMbP368hgwZohdeeEFRUVEaOHBg4b1BF/n6+l7zcwcMGKC77rpLf/75p9t+Y8oauvYhX/bv369mzZplS6IkqUaNGk6P58+fr06dOqlGjRry9fVVRESE3nrrrWzPs9vteuqppxQaGqqAgAB17NhRu3fvztcYkREjRqh+/fp51jEMQ6NGjZKPj4+WL19eoH317Nkz1x+dNm3aOJKeLB988IFatWolf39/ValSRYMGDdKRI0fyfI28dOrUSZJ04MABSeZVyrZt26pq1ary9/dXq1at9Mknn2R7nsVi0ZgxY7R48WI1a9ZMvr6+uXYHyenzymnsx+23367mzZtr9+7d6tixowICAlSrVi3Nnj072z5fe+01NWvWTAEBAapcubKioqK0ZMkSpzo7d+5U9+7dFRQUpAoVKqhz587ZTqqyujxu2bJFEyZMUPXq1RUYGKg777xTp0+fzv8HeYWQkBBJkpfX39eU8hojsn//fv3jH/9QxYoVNWTIEEnmcfzyyy+rWbNm8vPzU3BwsB544AGn6ayHDx+uatWqKTMzM1sMXbt21XXXXZdnnMnJyRo3bpzq1KkjX19fhYWFadasWU7T8V4+nufll19Wo0aN5Ovrq927d+e57/Pnz2vFihUaNGiQBgwYoPPnz+uzzz7LVi+vz2Dz5s266667VLduXfn6+qpOnToaP368zp8/77SPEydO6J577lHt2rXl6+urmjVrqnfv3nmO2ck6BpcuXaoZM2aodu3a8vPzU+fOnRUfH58tznnz5qlRo0by9/fXzTffrM2bN2erc+HCBU2bNk2tWrWS1WpVYGCgbrvtNm3cuDHPz0rK//ckJ88//7zS0tI0b948pyRKMi8ovf3220pNTXV8l7L+T3O7XW779u3q1q2brFarAgIC1KFDh2saa5PfsTC7du1S9erVdfvtt7vUbepyQ4YM0X333aft27fr66+/dmzP7/EkScuWLVNERIT8/PzUvHlzrVixIsffdIvFoqeeeirPePI69p5++mnVqlVLFStWVP/+/WWz2ZSRkaFx48apRo0aqlChgu65555sXRXzO+Zx5cqVat26tdNYtMTERKWkpOQ6fu7Kv70ZGRl68sknFRYW5vjcHn/88Ry7T37wwQe6+eabHb/N7du3d0rW8juu8I8//lD//v1VpUoV+fn5KSoqKlvXsYL+flesWFFVqlS5ar2UlBR9/fXXuvvuux1JlCQNGzZMFSpU0NKlS/N8/qeffqrffvstx7FEnp6eevvtt1WpUiWn46h+/fq5fj8v/z04evSoRo4cqeDgYPn6+qpZs2b673//e9X3lJP8HFNnzpzRzTffrNq1a2vPnj2O7dHR0ZKU4288rg0tUsiXevXqadu2bfrtt9/UvHnzPOu+9dZbatasme644w55eXnp888/18MPPyy73a7Ro0c76k2ZMkWzZ89Wr169FBMTo59//lkxMTFKT08vcLyXLl3SyJEj9fHHH2vFihXq0aNHgfY3cOBADRs2TDt27NBNN93k2H7o0CF9//33Tk39M2bM0NSpUzVgwADdd999On36tF577TW1b99eO3fuzDEZvZr9+/dLkqpWrSpJeuWVV3THHXdoyJAhunDhgj766CPdddddWr16dbb3umHDBi1dulRjxoxRtWrVckwaXf28zpw5o27duqlv374aMGCAPvnkE/3rX/9SixYtHN3C3nnnHT3yyCPq37+/Hn30UaWnp+uXX37R9u3bHdM+//7777rtttsUFBSkxx9/XN7e3nr77bd1++2369tvv832x2zs2LGqXLmynnzySR08eFAvv/yyxowZo48//jhfn2NSUpIkM/k5evSonnnmGfn5+WnAgAFXfe7FixcVExOjdu3a6YUXXnB0sXzggQe0YMEC3XPPPXrkkUd04MABvf7669q5c6e2bNkib29vDR06VIsWLdLatWvVs2dPxz5PnDihDRs26Mknn8z1ddPS0tShQwcdPXpUDzzwgOrWrautW7dqypQpOn78uF5++WWn+vPnz1d6erpGjRolX1/fq56ArFq1SufOndOgQYMUEhKi22+/XYsXL3b8H+XnM1i2bJnS0tL00EMPqWrVqvrhhx/02muvKSEhQcuWLXM8v1+/fvr99981duxY1a9fX6dOndLXX3+tw4cPX/VixnPPPScPDw9NnDhRNptNs2fP1pAhQ7R9+3ZHnffee08PPPCA2rZtq3HjxunPP//UHXfcoSpVqjh1HUtJSdG7776rwYMH6/7779fZs2f13nvvKSYmxqmb55UK+rvy+eefq379+rrttttyLG/fvr3q16/vmHCnevXqev/9953qZGZmavz48U4tBhs2bFD37t3VqlUrPfnkk/Lw8HBc0Nq8ebNuvvlml+K8mh07digmJkZRUVH67LPP5O/vf837Gjp0qObNm6evvvrK0aqU3+Ppf//7nwYOHKgWLVpo5syZOnPmjO69917VqlWrwO/xcjNnzpS/v78mT56s+Ph4vfbaa/L29paHh4fOnDmjp556St9//70WLFigBg0aaNq0aS7tPzMzUzt27NBDDz3ktL1GjRry9/fX559/rrFjx+b5Xbbb7brjjjv03XffadSoUQoPD9evv/6ql156SXv37tXKlSsddZ9++mk99dRTatu2raZPny4fHx9t375dGzZsyLPF5kq///67br31VtWqVUuTJ09WYGCgli5dqj59+ujTTz/N1kW1oL/fV/Prr7/q4sWL2S5s+vj46IYbbtDOnTvzfP7nn38uyUy8cmK1WtW7d28tXLhQ8fHxCgsL08svv5ztQsJLL72kXbt2Of5enzx5Urfccovjwmb16tX15Zdf6t5771VKSorGjRt3je84Z4mJierSpYuSkpL07bffqlGjRk7voVGjRtqyZYvGjx9fqK9bbhlAPnz11VeGp6en4enpabRp08Z4/PHHjbVr1xoXLlzIVjctLS3btpiYGKNhw4aOxydOnDC8vLyMPn36ONV76qmnDEnG8OHDHds2btxoSDI2btzo2DZ8+HCjXr16jscHDhwwJBnPP/+8kZmZaQwcONDw9/c31q5d67T//OwrJzabzfD19TUee+wxp+2zZ882LBaLcejQIcMwDOPgwYOGp6enMWPGDKd6v/76q+Hl5ZVt+5Xmz59vSDLWrVtnnD592jhy5Ijx0UcfGVWrVjX8/f2NhIQEwzCyf8YXLlwwmjdvbnTq1MlpuyTDw8PD+P333522F+Tz6tChgyHJWLRokWNbRkaGERISYvTr18+xrXfv3kazZs3yfL99+vQxfHx8jP379zu2HTt2zKhYsaLRvn37bJ9LdHS0YbfbHdvHjx9veHp6GsnJyXm+zpNPPmlIynarVKmSsWbNmhw/m/nz5zu2DR8+3JBkTJ482anu5s2bDUnG4sWLnbavWbPGafulS5eM2rVrGwMHDnSqN2fOHMNisRh//vmnY1u9evWcjv9nnnnGCAwMNPbu3ev03MmTJxuenp7G4cOHneIOCgoyTp06lefncbmePXsat956q+PxvHnzDC8vr2z7yO0zMIycv/MzZ850+m6cOXPGcczlpUOHDkaHDh0cj7OOwfDwcCMjI8Ox/ZVXXjEkGb/++qthGOZ3oEaNGsYNN9zgVG/evHmGJKd9Xrx40alOVnzBwcHGyJEjHdsK8j25UnJysiHJ6N27d57v/4477jAkGSkpKTmWP/zww4anp6exYcMGwzAMw263G40bNzZiYmKcvhtpaWlGgwYNjC5duji2ZX2PDhw44Nh25eed2/EfGBhoGIZhfPfdd0ZQUJDRo0cPIz09Pc/3Yhh/f/dOnz6dY3nWcXHnnXc6xX6lK48nwzCMFi1aGLVr1zbOnj3r2PbNN98YkrL9pksynnzyScfj/HwWWf+vzZs3d/pbN3jwYMNisRjdu3d3eo02bdpke90rv885iY+PNyQZr732WrayadOmGZKMwMBAo3v37saMGTOM2NjYbPXef/99w8PDw9i8ebPT9rlz5xqSjC1bthiGYRj79u0zPDw8jDvvvNO4dOmSU93Lj5/8HBedO3c2WrRo4XQc2O12o23btkbjxo0d2wr6+325ZcuW5fpdyyrbtGlTtrK77rrLCAkJyXPfN9xwg2G1WvOsM2fOHEOSsWrVqhzLly5dakgypk+f7th27733GjVr1jQSExOd6g4aNMiwWq2O4z2nzzjr+3O5K4+prM93x44dxvHjx41mzZoZDRs2NA4ePJhjjF27djXCw8PzfJ/IP7r2IV+6dOmibdu26Y477tDPP/+s2bNnKyYmRrVq1crWjH/51UmbzabExER16NBBf/75p2w2myRp/fr1unjxoh5++GGn544ZM6ZAcV64cMHRMvPFF1+4dHUtL0FBQerevbuWLl0q47Kl1z7++GPdcsstqlu3riRzILndbteAAQOUmJjouIWEhKhx48b56jokmc3v1atXV506dTRo0CBVqFBBK1ascFxpvfwzPnPmjGw2m2677Tb99NNP2fbVoUMHRURE5Pg61/p5VahQQXfffbfjsY+Pj26++Wb9+eefjm2VKlVSQkKCduzYkeM+Ll26pK+++kp9+vRx6jZZs2ZN/fOf/9R3332nlJQUp+eMGjXKqUvTbbfdpkuXLunQoUP5ivvTTz/V119/ra+++krz589XkyZN1K9fP23dujVfz7/yivGyZctktVrVpUsXp//vVq1aqUKFCo7/bw8PDw0ZMkSrVq3S2bNnHc9fvHix2rZtqwYNGuT6msuWLdNtt92mypUrO71GdHS0Ll26pE2bNjnV79evX7ZuY7n566+/tHbtWqdxd/369XN0Z8rPZyA5H4+pqalKTExU27ZtZRiG4yqwv7+/fHx89M033zh1e8yve+65x6kVJqtVJ+uY+/HHH3Xq1Ck9+OCDTvVGjBghq9XqtC9PT09HHbvdrqSkJMeV7Jy+Q4Xxu5L1/16xYsU862WVX3nsS9KiRYv05ptvavbs2Y7ZTXft2qV9+/bpn//8p/766y/H8ZGamqrOnTtr06ZNTl1AC2Ljxo2KiYlR586dtXz58gKN1ciS1ZXt8u9Ffo6nY8eO6ddff3V028rSoUMHtWjRosBxXW7YsGFOk2+0bt1ahmFo5MiRTvVat26tI0eO6OLFiy7t/6+//pIkVa5cOVvZ008/rSVLligyMlJr167VE088oVatWunGG29UXFyco96yZcsUHh6upk2bOv1OZHULz/otWrlypex2u6ZNm5ZtwoIru4vmJSkpSRs2bNCAAQN09uxZx+v99ddfiomJ0b59+3T06FGn5xT09/tqsrp+5nRc+vn55dg19HJnz54t0Pdz9+7dGjlypHr37q3/+7//k2R2Bf7000/Vq1cvGYbh9H8TExMjm82W42/OtUhISFCHDh2UmZmpTZs2ORYUvlLW3xIUDrr2Id9uuukmLV++XBcuXNDPP/+sFStW6KWXXlL//v21a9cux8n6li1b9OSTT2rbtm1KS0tz2ofNZpPVanX8cIaFhTmVV61aNcc/Jvk1c+ZMnTt3Tl9++eU1rRuTl4EDB2rlypXatm2b2rZtq/379ys2Ntapa9W+fftkGIYaN26c4z7yOxPWG2+8oSZNmsjLy0vBwcG67rrrnP7orV69Ws8++6x27drl1P89pz+EeZ2kX+vnVbt27WyvVblyZf3yyy+Ox//617+0bt063XzzzQoLC1PXrl31z3/+09Hf//Tp00pLS8txfFB4eLhjZr1mzZo5tmclrJe/pqR8n5i3b9/eacB7//791bhxY40dO1axsbF5PtfLy0u1a9d22rZv3z7ZbLZsYxWyXD4YfNiwYZo1a5ZWrFihYcOGac+ePYqNjdXcuXPzfN19+/bpl19+yTU5unLAeV7/31f6+OOPlZmZqcjISKfxRq1bt9bixYuduuJKOX8GknT48GFNmzZNq1atyvZ/kXXxxNfXV7NmzdJjjz2m4OBg3XLLLerZs6eGDRvmGKuWl6v932f9plz53fP29s5xfOPChQv14osv6o8//nAau5bT51cYvytZJ2CXJww5yS3h2rVrlx588EENHjxYEyZMcGzft2+fJOU55bfNZivQ76okpaenq0ePHmrVqpWWLl3qNK6wILK6RV3+fvNzPOX2NyRrW2GdnErZj72sxPzKmQatVqvsdrtsNpujW5crLr9Id7nBgwdr8ODBSklJ0fbt27VgwQItWbJEvXr10m+//SY/Pz/t27dPcXFxV/2d2L9/vzw8PHK9uJZf8fHxMgxDU6dO1dSpU3N9zcu7WRb09/tqshLwnMaEpaenX7ULasWKFa+aYOT2/UxJSVHfvn1Vq1YtLVq0yPH38fTp00pOTta8efM0b968HPdZWJOGDB06VF5eXoqLi8vzN9UwDJeSZuSNRAou8/Hx0U033aSbbrpJTZo00T333KNly5bpySef1P79+9W5c2c1bdpUc+bMUZ06deTj46MvvvhCL730UqFdGc1NTEyM1qxZo9mzZ+v2228v1NmnevXqpYCAAC1dulRt27bV0qVL5eHh4TSDkN1ud6zF4+npmW0f+V3U8uabb87WzzvL5s2bdccdd6h9+/Z68803VbNmTXl7e2v+/PnZJnKQlOcfj2v9vHJ6b5LziUB4eLj27Nmj1atXa82aNfr000/15ptvatq0aXr66afz9TrX8rquqFChglq3bq3PPvvsqjPQ+fr6ZruCa7fbVaNGDS1evDjH51x+UhMREaFWrVrpgw8+0LBhw/TBBx/Ix8fnquOz7Ha7unTposcffzzH8iZNmjg9dmW8SlbcuQ1mv3Jmp5w+g0uXLjn64//rX/9S06ZNFRgYqKNHj2rEiBFO3/lx48apV69eWrlypdauXaupU6dq5syZ2rBhgyIjI/OMtTD/7z/44AONGDFCffr00aRJk1SjRg15enpq5syZjvGIlyuM3xWr1aqaNWs6XWzIyS+//KJatWo5DZY/c+aM+vXrpyZNmujdd991qp/1+T7//PO5ju0qjMV0fX199Y9//EOfffaZ1qxZ4zTWryB+++03SX8nRK4cT8Ult2OvsI7JrKTraglFUFCQunTpoi5dusjb21sLFy7U9u3b1aFDB9ntdrVo0UJz5szJ8bnXOr18brL+HyZOnKiYmJgc61yZ5Bb27/eVatasKclcd+pKx48fV2hoaJ7PDw8P165du3T48OFsSV+WrO/vlYnoiBEjdOzYMf3www9O392sz+nuu+/O9WLH9ddfn2dc+dW3b18tWrRIr7zyimbOnJlrvTNnzpTKJQJKKhIpFEjWyX7WD9fnn3+ujIwMrVq1yumH6MoubVlNzvHx8U5XgJOSkgp0deqWW27Rgw8+qJ49e+quu+7SihUrCu3KaWBgoHr27Klly5Zpzpw5+vjjj3Xbbbc5/Tg3atRIhmGoQYMG2U5wC8unn34qPz8/rV271qkLw/z5813eV1F+XpL5mQ0cOFADBw7UhQsX1LdvX82YMUNTpkxR9erVFRAQ4DSjUJY//vhDHh4ehf7HPydZ3XDOnTvn8lTejRo10rp163TrrbfmK4EZNmyYJkyYoOPHj2vJkiXq0aPHVVsKGjVqpHPnzjlmWyosBw4c0NatWzVmzBh16NDBqcxut2vo0KFasmSJo4tKbn799Vft3btXCxcudBqkffksbJdr1KiRHnvsMT322GPat2+fbrjhBr344ov64IMPCvR+sn5T9u3b5+jOJJkD+Q8cOKCWLVs6tn3yySdq2LChli9f7nRlNrdJPwrre9KzZ0+98847+u6779SuXbts5Zs3b9bBgwf1wAMPOLbZ7XYNGTJEycnJWrduXbZ15LIGkgcFBRX6MXI5i8WixYsXq3fv3rrrrrsKrdU/azKNrJPx/B5Pl/8NuVJO20qyunXryt/f3zEra35ERUVp4cKFjr+9jRo10s8//6zOnTvn2drQqFEj2e127d69O9fEOz+yLrB4e3sX6XHniubNm8vLy0s//vij0wWqCxcuaNeuXVe9aNWzZ099+OGHWrRoUY6/eykpKfrss8/UtGlTpyTxueee08qVK7V8+XI1bdrU6TnVq1dXxYoVdenSpSL/nMaOHauwsDBNmzZNVqtVkydPzrHelb+HKBjGSCFfNm7cmONVoy+++EKSHN2zsq44XV7XZrNlO8nv3LmzvLy8snVreuONNwoca3R0tD766COtWbNGQ4cOLdQrmAMHDtSxY8f07rvv6ueff862lkTfvn3l6empp59+OtvnZRiGoy98QXh6espisejSpUuObQcPHnSalckVRfV5XflefXx8FBERIcMwlJmZKU9PT3Xt2lWfffaZ0/TXJ0+e1JIlS9SuXTunK3tFISkpSVu3blVISEiu3fPyMmDAAF26dEnPPPNMtrKLFy8qOTnZadvgwYNlsVj06KOP6s8//3QaZ5bXa2zbtk1r167NVpacnOzyeIwsWa1Rjz/+uPr37+90GzBggDp06JBrS9vlcvrOG4ahV155xaleWlpathk5GzVqpIoVK+bYFcdVUVFRql69uubOneu0VtqCBQuy/T/kFPP27dvzXOizML4nkyZNkr+/vx544IFs34+kpCQ9+OCDCggI0KRJkxzbn376aa1du1Yffvhhjt0OW7VqpUaNGumFF17IcRrygiwPcKWsKd9vuukm9erVSz/88EOB9rdkyRK9++67atOmjTp37iwp/8dTaGiomjdvrvfff1+pqamO7Zs3b9avv/5aoLiKm7e3t6KiovTjjz86bU9LS8v1mMxaXDbrb++AAQN09OhRvfPOO9nqnj9/3vEZ9enTRx4eHpo+fXq2Y9iVlqEaNWro9ttv19tvv51jC1BhHnf5ZbVaFR0drQ8++MCpC+3777+vc+fO5bn+lGR29Y6IiNBzzz2X7f/CbrfroYce0pkzZ5wuuKxbt07/93//pyeeeEJ9+vTJtk9PT0/169fPMbX6lQr7c5o6daomTpyoKVOm5LjsjM1m0/79+9W2bdtCfd3yjBYp5MvYsWOVlpamO++8U02bNtWFCxe0detWffzxx6pfv77uueceSeaaOD4+PurVq5ceeOABnTt3Tu+8845q1Kjh9GMbHBysRx99VC+++KL69u2rbt266eeff9aqVatUrVq1Avff7dOnj+bPn69hw4YpKChIb7/9doH2lyVr/ZyJEyc6fiAv16hRIz377LOaMmWKDh48qD59+qhixYo6cOCAVqxYoVGjRmnixIkFiqFHjx6aM2eOunXrpn/+8586deqU3njjDYWFhV2121BuiuLz6tq1q0JCQnTrrbcqODhYcXFxev3119WjRw9H//Jnn31WX3/9tdq1a6eHH35YXl5eevvtt5WRkZHjulQF9cknn6hChQoyDEPHjh3Te++9pzNnzmju3LnXdMx16NBBDzzwgGbOnKldu3apa9eu8vb21r59+7Rs2TK98sor6t+/v6N+9erV1a1bNy1btkyVKlXK1/TZkyZN0qpVq9SzZ0+NGDFCrVq1Umpqqn799Vd98sknOnjw4DV101i8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zmnXrl2O9aEOHDigXbt26fDhw5KkpKQk7dq1S7t375ZkJkm7du1yjH+yWq269957NWHCBG3cuFGxsbG655571KZNG2bsAwAAAArBb7/9pq5du+rs2bPaunWrWrdu7VT+1FNP6YYbbsj1+bfffrvGjRuXa/mIESPUp0+fwgm2GLk1kfrxxx8VGRmpyMhISdKECRMUGRmpadOmSZJWrVqlyMhI9ejRQ5I0aNAgRUZGau7cuY59vPTSS+rZs6f69eun9u3bKyQkRMuXLy/+NwMAAACUMKdPn9ZDDz2kunXrytfXVyEhIYqJiXFpzdXmzZuratWqCgoKUkxMjCZPnlyEEZcebh0jdfvtt+c5F/+IESM0YsSIPPfh5+enN954Q2+88UYhRwcAAAAUHrtdio+XbDbJapXCwqRCmPMgT/369dOFCxe0cOFCNWzYUCdPntT69ev1119/ubSfDz/8UO+++678/Pzk6elZRNGWLqV6jBQAACg8dru0d6+0Y4d5b7e7OyKg7Ni5U5owQRo7Vpo40byfMMHcXlSSk5O1efNmzZo1Sx07dlS9evV08803a8qUKbrjjjskSXPmzFGLFi0UGBioOnXq6OGHH9a5c+ec9vPOO++oTp06ql69uvr37685c+ZkW37oclfrqve///1PVqtVixcvzrH8al0BS4pSPWsfAAAoHDt3SgsXSnFxUnq65OcnhYdLw4dL/78HPoBrtHOnNH26lJgo1a4tBQZKqalSbKx06JA0bVrRfM8qVKigChUqaOXKlbrllltynLXaw8NDr776qho0aKA///xTDz/8sB5//HG9+eabkqQtW7bowQcf1KxZs3THHXdo3bp1mjp16jXHtGTJEj344INasmSJevbsec37KQlokQIAoJzLOsmLjZWqVJEaNzbvY2PN7UV5xRwo6+x28yJFYqJ5cSIoSPL0NO/Dw83tixYVTQuwl5eXFixYoIULF6pSpUq69dZb9e9//1u//PKLo864cePUsWNH1a9fX506ddKzzz6rpUuXOspfe+01de/eXRMnTlSTJk308MMPq3v37tcUzxtvvKGHH35Yn3/+ealPoiQSKQAAyjV3nuQB5UF8vNnSW7u2dOV6vhaLuX33brNeUejXr5+OHTumVatWqVu3bvrmm2904403asGCBZKkdevWqXPnzqpVq5YqVqyooUOH6q+//lJaWpokc9bsm2++2WmfVz7Oj08++UTjx4/X119/rQ4dOhT4fZUEJFIAAJRj7j7JA8o6m83sLhsYmHN5QIBZbrMVXQx+fn7q0qWLpk6dqq1bt2rEiBF68skndfDgQfXs2VPXX3+9Pv30U8XGxjomcLtw4UKhxhAZGanq1avrv//9b56TzZUmJFIAAJRjJeEkDyjLrFZzzGFqas7laWlmudVafDFFREQoNTVVsbGxstvtevHFF3XLLbeoSZMmOnbsmFPd6667Tjt27HDaduXj/GjUqJE2btyozz77TGPHji1Q/CUFiRQAAOVYSTzJA8qSsDCzm2xCgnRlQ4xhmNsjIsx6he2vv/5Sp06d9MEHH+iXX37RgQMHtGzZMs2ePVu9e/dWWFiYMjMz9dprr+nPP//U+++/77ReqySNHTtWX3zxhV5++WUdOHBA77zzjr744gtZrmzCzocmTZpo48aN+vTTT0vFrHxXQyIFAEA55s6TPKA88PAwZ7+sVs3sRpuSIl28aN7HxZnbhw0rmvWkKlSooNatW+ull15S+/bt1bx5c02dOlX333+/Xn/9dbVs2VJz5szRrFmz1Lx5cy1evFgzZ8502sett96quXPn6oUXXlCzZs30xRdfaPz48fLz87ummK677jpt2LBBH374oR577LHCeJtuYzHKSifFAkhJSZHVapXNZlNQUJC7wwEAoFhdOTVzQIDZEpWQYJ7kFdXUzEBpkZ6ergMHDqhBgwbXnEDktMRARISZRJW279f999+vP/74Q5s3b3Z3KNcsr//T/OYGrCMFAEA5FxlpJktZJ3nHjpkneVFRpfMkDyiJIiOlli3NiVtsNrO7bFhY0bREFbYXXnhBXbp0UWBgoL788kstXLjQsc5UeUYiBQAASvVJHlBaeHhITZq4OwrX/fDDD5o9e7bOnj2rhg0b6tVXX9V9993n7rDcjkQKAABIKr0neQCK1uUL9OJvXGcCAAAAABeRSAEAAACAi0ikAAAAAMBFJFIAAAAA4CISKQAAAABwEYkUAAAAALiIRAoAAABAvowYMUJ9+vTJtfypp57SDTfcUGzxuBOJFAAAAFAGjRgxQhaLRRaLRT4+PgoLC9P06dN18eLFInvNiRMnav369UW2/5KEBXkBAACA4mC3S/Hxks0mWa1SWJi5EnYR6tatm+bPn6+MjAx98cUXGj16tLy9vTVlyhSX9nPp0iVZLJar1qtQoYIqVKhwreGWKrRIAQAAAEVt505pwgRp7Fhp4kTzfsIEc3sR8vX1VUhIiOrVq6eHHnpI0dHRWrVqlebMmaMWLVooMDBQderU0cMPP6xz5845nrdgwQJVqlRJq1atUkREhHx9fXX48OFs+9+xY4eqV6+uWbNmScretS+rK+ALL7ygmjVrqmrVqho9erQyMzMddd588001btxYfn5+Cg4OVv/+/R1lGRkZeuSRR1SjRg35+fmpXbt22rFjh6P8m2++kcVi0fr16xUVFaWAgAC1bdtWe/bsKcyPMUckUgAAAEBR2rlTmj5dio2VqlSRGjc272Njze1FnExdzt/fXxcuXJCHh4deffVV/f7771q4cKE2bNigxx9/3KluWlqaZs2apXfffVe///67atSo4VS+YcMGdenSRTNmzNC//vWvXF9z48aN2r9/vzZu3KiFCxdqwYIFWrBggSTpxx9/1COPPKLp06drz549WrNmjdq3b+947uOPP65PP/1UCxcu1E8//aSwsDDFxMQoKSnJ6TWeeOIJvfjii/rxxx/l5eWlkSNHFvCTujoSKQAAAKCo2O3SwoVSYqIUHi4FBUmenuZ9eLi5fdEis14RMgxD69at09q1a9WpUyeNGzdOHTt2VP369dWpUyc9++yzWrp0qdNzMjMz9eabb6pt27a67rrrFBAQ4ChbsWKFevfurbffflujRo3K87UrV66s119/XU2bNlXPnj3Vo0cPxziqw4cPKzAwUD179lS9evUUGRmpRx55RJKUmpqqt956S88//7y6d++uiIgIvfPOO/L399d7773n9BozZsxQhw4dFBERocmTJ2vr1q1KT08vjI8uVyRSAAAAQFGJj5fi4qTataUrxxhZLOb23bvNekVg9erVqlChgvz8/NS9e3cNHDhQTz31lNatW6fOnTurVq1aqlixooYOHaq//vpLaWlpjuf6+Pjo+uuvz7bP7du366677tL777+vgQMHXjWGZs2aydPT0/G4Zs2aOnXqlCSpS5cuqlevnho2bKihQ4dq8eLFjhj279+vzMxM3XrrrY7nent76+abb1ZcXJzTa1weZ82aNSXJ8RpFhUQKAAAAKCo2m5SeLgUG5lweEGCW22xF8vIdO3bUrl27tG/fPp0/f14LFy7U6dOn1bNnT11//fX69NNPFRsbqzfe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\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"z_88rOO3-Smh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"GvNUSJ0t-Spj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"J4wBAh0k-Ssl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"nuBbjIY7-SvO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"0ghKoYjs-SyB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"h2iBa-ux-S06"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"CzplwS3--S32"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"qeSWIzvB-S6i"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"pFB4QIBa-S9U"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"19Rw89Er-TAA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"uTJMO3JK-TCT"},"execution_count":null,"outputs":[]}]}