{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM7M6qT43JoQvMMB326yraB"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":3,"metadata":{"id":"TwpKr18isLw0","executionInfo":{"status":"ok","timestamp":1728839992484,"user_tz":-180,"elapsed":455,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"outputs":[],"source":[]},{"cell_type":"markdown","source":["GEREKLİLİKLER VE PARAMETRELER"],"metadata":{"id":"F9_6H5LLsmB3"}},{"cell_type":"code","source":["!pip install --upgrade numpy\n","\n","!pip install -q py-feat"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6D4EMr2psR9Q","executionInfo":{"status":"ok","timestamp":1728840008250,"user_tz":-180,"elapsed":15317,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"52bcbb61-7a9c-4327-edbb-22954bad1bee"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (1.23.5)\n","Collecting numpy\n","  Using cached numpy-2.1.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (60 kB)\n","Using cached numpy-2.1.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (16.3 MB)\n","Installing collected packages: numpy\n","  Attempting uninstall: numpy\n","    Found existing installation: numpy 1.23.5\n","    Uninstalling numpy-1.23.5:\n","      Successfully uninstalled numpy-1.23.5\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","cudf-cu12 24.6.1 requires numpy<2.0a0,>=1.23, but you have numpy 2.1.2 which is incompatible.\n","cupy-cuda12x 12.2.0 requires numpy<1.27,>=1.20, but you have numpy 2.1.2 which is incompatible.\n","gensim 4.3.3 requires numpy<2.0,>=1.18.5, but you have numpy 2.1.2 which is incompatible.\n","nltools 0.5.1 requires numpy<1.24, but you have numpy 2.1.2 which is incompatible.\n","numba 0.60.0 requires numpy<2.1,>=1.22, but you have numpy 2.1.2 which is incompatible.\n","pytensor 2.25.5 requires numpy<2,>=1.17.0, but you have numpy 2.1.2 which is incompatible.\n","rmm-cu12 24.6.0 requires numpy<2.0a0,>=1.23, but you have numpy 2.1.2 which is incompatible.\n","tensorflow 2.17.0 requires numpy<2.0.0,>=1.23.5; python_version <= \"3.11\", but you have numpy 2.1.2 which is incompatible.\n","thinc 8.2.5 requires numpy<2.0.0,>=1.19.0; python_version >= \"3.9\", but you have numpy 2.1.2 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed numpy-2.1.2\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","albucore 0.0.16 requires numpy>=1.24, but you have numpy 1.23.5 which is incompatible.\n","albumentations 1.4.15 requires numpy>=1.24.4, but you have numpy 1.23.5 which is incompatible.\n","bigframes 1.21.0 requires numpy>=1.24.0, but you have numpy 1.23.5 which is incompatible.\n","chex 0.1.87 requires numpy>=1.24.1, but you have numpy 1.23.5 which is incompatible.\n","jax 0.4.33 requires numpy>=1.24, but you have numpy 1.23.5 which is incompatible.\n","jaxlib 0.4.33 requires numpy>=1.24, but you have numpy 1.23.5 which is incompatible.\n","xarray 2024.9.0 requires numpy>=1.24, but you have numpy 1.23.5 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0m"]}]},{"cell_type":"code","source":["import os\n","from feat import Detector\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from google.colab import drive"],"metadata":{"id":"AELZzTelsSAI","executionInfo":{"status":"ok","timestamp":1728840008250,"user_tz":-180,"elapsed":10,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# Google Drive'ı bağla\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3EG3SlZesSCb","executionInfo":{"status":"ok","timestamp":1728840036386,"user_tz":-180,"elapsed":28146,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"f7893577-3faa-4b5c-812d-8996432b9390"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# Detector'ı yapılandır\n","detector = Detector(\n","    face_model=\"retinaface\",\n","    landmark_model=\"mobilefacenet\",\n","    au_model='xgb',\n","    emotion_model=\"resmasknet\",\n","    facepose_model=\"img2pose\",\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3OoTQ1zFsSH7","executionInfo":{"status":"ok","timestamp":1728840171721,"user_tz":-180,"elapsed":135337,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"60f6f32e-d883-46d1-adcb-0b146cfae6f1"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 1786259/1786259 [00:00<00:00, 6911065.44it/s]\n","100%|██████████| 12281146/12281146 [00:00<00:00, 24079463.14it/s]\n","100%|██████████| 965545/965545 [00:00<00:00, 5689936.09it/s]\n","100%|██████████| 33635572/33635572 [00:00<00:00, 37077539.77it/s]\n","100%|██████████| 130263/130263 [00:00<00:00, 1715198.06it/s]\n","100%|██████████| 45886076/45886076 [00:01<00:00, 40922612.63it/s]\n","100%|██████████| 130263/130263 [00:00<00:00, 1454809.99it/s]\n","100%|██████████| 53851068/53851068 [00:01<00:00, 43269659.02it/s]\n","100%|██████████| 130263/130263 [00:00<00:00, 1551888.79it/s]\n","100%|██████████| 166975/166975 [00:00<00:00, 1450708.24it/s]\n","100%|██████████| 530776/530776 [00:00<00:00, 3487473.84it/s]\n","100%|██████████| 493515/493515 [00:00<00:00, 3023774.34it/s]\n","100%|██████████| 207163/207163 [00:00<00:00, 1848402.84it/s]\n","100%|██████████| 1151853/1151853 [00:00<00:00, 6001666.68it/s]\n","100%|██████████| 572282/572282 [00:00<00:00, 3649706.97it/s]\n","100%|██████████| 330487/330487 [00:00<00:00, 2433713.59it/s]\n","100%|██████████| 335449/335449 [00:00<00:00, 2639955.95it/s]\n","100%|██████████| 586893/586893 [00:00<00:00, 3460974.40it/s]\n","100%|██████████| 206931/206931 [00:00<00:00, 1739910.07it/s]\n","100%|██████████| 689547/689547 [00:00<00:00, 3954947.07it/s]\n","100%|██████████| 583629/583629 [00:00<00:00, 3675617.95it/s]\n","100%|██████████| 207077/207077 [00:00<00:00, 1956060.98it/s]\n","100%|██████████| 256865/256865 [00:00<00:00, 2023093.08it/s]\n","100%|██████████| 1079268/1079268 [00:00<00:00, 5338049.52it/s]\n","100%|██████████| 1952633/1952633 [00:00<00:00, 8781059.79it/s]\n","100%|██████████| 312240/312240 [00:00<00:00, 2514417.80it/s]\n","100%|██████████| 524139/524139 [00:00<00:00, 3414192.12it/s]\n","100%|██████████| 77744/77744 [00:00<00:00, 1087345.84it/s]\n","100%|██████████| 551634217/551634217 [00:12<00:00, 44288982.65it/s]\n","100%|██████████| 448/448 [00:00<00:00, 396842.28it/s]\n","100%|██████████| 944/944 [00:00<00:00, 875978.53it/s]\n","100%|██████████| 169843940/169843940 [00:04<00:00, 41566141.44it/s]\n","100%|██████████| 176/176 [00:00<00:00, 99621.80it/s]\n","100%|██████████| 176/176 [00:00<00:00, 171474.45it/s]\n","100%|██████████| 111898327/111898327 [00:03<00:00, 33913773.96it/s]\n","/usr/local/lib/python3.10/dist-packages/feat/face_detectors/Retinaface/Retinaface_test.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  pretrained_dict = torch.load(\n","/usr/local/lib/python3.10/dist-packages/feat/detector.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  checkpoint = torch.load(\n","Downloading: \"https://download.pytorch.org/models/resnet18-f37072fd.pth\" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth\n","100%|██████████| 44.7M/44.7M [00:00<00:00, 117MB/s]\n","/usr/local/lib/python3.10/dist-packages/feat/facepose_detectors/img2pose/img2pose_test.py:105: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  checkpoint = torch.load(model_path, map_location=self.device)\n","/usr/local/lib/python3.10/dist-packages/feat/emo_detectors/ResMaskNet/resmasknet_test.py:718: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  torch.load(\n","/usr/local/lib/python3.10/dist-packages/feat/identity_detectors/facenet/facenet_model.py:275: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  torch.load(\n"]}]},{"cell_type":"markdown","source":["tüm DATASETİ ALMA"],"metadata":{"id":"O7vCGiPHstTk"}},{"cell_type":"code","source":["# Video ana klasörü\n","folder_parkinsonpath = '/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head'\n","folder_healthypath = '/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head'\n","\n","# İzin verilen video dosya uzantıları\n","video_extensions = ['.mp4', '.avi', '.mkv', '.mov']\n","\n","# Klasördeki video dosyalarının yollarını listeleme\n","video_parkinsonspaths = [os.path.join(folder_parkinsonpath, file) for file in os.listdir(folder_parkinsonpath)\n","               if any(file.lower().endswith(ext) for ext in video_extensions)]\n","\n","video_healthypaths = [os.path.join(folder_healthypath, file) for file in os.listdir(folder_healthypath)\n","               if any(file.lower().endswith(ext) for ext in video_extensions)]\n","\n","# Sonuçları yazdır\n","for video_path in video_parkinsonspaths:\n","    print(video_path)\n","print(\"\\n**************** \\n\")\n","for video_path in video_healthypaths:\n","    print(video_path)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EHDpW0GesSKn","executionInfo":{"status":"ok","timestamp":1728840173090,"user_tz":-180,"elapsed":1371,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"cae040ee-e03f-4d49-f784-0569239f6302"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/ali-cebeci-durus-tekayak-1-trim-merged-2_vICXcgYD.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/bahtiyar-tegun-durus-tekayak-1-trim-merged_4M4vhIE0.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/hanifi-saglam-durus-tekayak-1-trim-merged-3_MMpNTsmc.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/cihan-kurt-durus-tekayak-ata-trim-merged_8YDSW17r.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/ilknur-ustaoglu-durus-tekayak-2-trim-merged-3_gwzE0p7c.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/hizir-canca-durus-tekayak-3-trim_o9kQzG1m.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/mehmet-eryigit-durus-tekayak-1-trim-merged_kzLuULsa.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/hatice-cebeci-durus-tekayak-trim-merged_IDGIqZaw.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/munip-ozcelik-durus-tekayak-1-trim-merged_Hjs6nKrM.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/rasim-pamuk-durus-tekayak-ata-trim-merged_qX1eqSBq.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/salih-zeki-yaman-durus-tekayak-ata-trim-merged-1_7TdJPPmX.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/turgut-kiraci-durus-tekayak-efe-trim-merged-1_EAjU78OV.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/sevli-okumus-durus-tekayak-1-trim_RKYEEnXU.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/yusuf-albayrak-durus-tekayak-8-trim-merged-1_mwGaCEIs.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/zeki-kahvecioglu-durus-tekayak-2-trim_saJBdXxx.mp4\n","\n","**************** \n","\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/canan-karaman-durus-tekayak-3-trim-merged-1_s9hUjGzM (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/ekrem-sarlayan-durus-tekayak-2-trim-merged-1_Trk5fdSv (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/faruk-tunca-durus-tekayak-3-trim-merged-1_ZkktaE85 (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/gullu-cakmakci-durus-tekayak-1-trim-merged-1_aDeFOjfX (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/halide-hale-ucar-durus-tekayak-2-trim-merged-1_RRKx3svS (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/kamuran-tan-durus-tekayak-1-trim-merged-1_ek1KUtpj (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/naci-sari-durus-tekayak-1-trim-merged_gJEQxmqd (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/necip-gursoy-durus-tekayak-4-trim-merged-2_lFmtSUpW (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/nermin-sari-durus-tekayak-1-trim-merged-1_9VJhuCmq (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/recep-bayhan-durus-tekayak-2-trim-merged-2_7uuOk1tL (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/samime-sever-durus-tekayak-1-trim-merged_sRSRlhDD (2).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/sebahat-gokgoz-durus-tekayak-1-trim-merged-2_yTT56cSw (2).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/selver-ozon-durus-tekayak-1-trim-merged-1_C9GX0qlh (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/semiha-yildiz-durus-tekayak-3-trim-merged-1_2dXiAMo8 (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/sahizer-balkan-durus-tekayak-trim-merged-3_a9UZ2MDK (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/yusuf-gokgoz-durus-tekayak-2-trim-merged-2_WEKqbzSA (1).mp4\n"]}]},{"cell_type":"markdown","source":["model OLUSTURMA"],"metadata":{"id":"MxNNsgU2sxT-"}},{"cell_type":"code","source":["au_columns = [\n","    'AU01', 'AU02',  'AU04',\n","    'AU06', 'AU07',  'AU09', 'AU10',\n","    'AU11', 'AU12', 'AU14', 'AU15',\n","     'AU17', 'AU20', 'AU24', 'AU25',\n","    'AU26', 'AU28', 'AU43'\n","\n","]\n","\n","#!!!  Yüz Kaslarının Aktivasyon Oranları  formülü\n","au_new_ft1=[\n","    'AU02',  # Dış Kaş Kaldırıcı (Frontalis - lateral)\n","\n","\n","    'AU06',  # Yanak Kaldırıcı (Orbicularis Oculi - orbital)\n","    'AU07',  # Kapak Sıkılaştırıcı (Orbicularis Oculi - palpebral)\n","    'AU09',  # Burun Kırışıklığı (Levator Labii Superioris Alaeque Nasi)\n","    'AU11',\n","    'AU12',  # Dudak Köşe Çektirmesi (Zygomaticus majör)\n","    'AU15',  # Dudak Köşe Bastırıcı (Depresör Anguli Oris)\n","    'AU20',  # Dudak Sedyesi (Risorius, Platysma)\n","\n","    'AU25',  # Dudak Kısmı (Depresör Labii inferioris)\n","    'AU26',  # Çene Düşmesi (Masseter, Temporalis)\n","\n","]\n","\n","#!!! YÜKSEK  POZİTİF KORELASYON\n","au_new_ft2=[\n","    'AU01',\n","    'AU24'\n","\n","]\n","\n","\n","\n","def process_video(video_path):\n","    predictions = detector.detect_video(video_path, skip_frames=20)\n","\n","    # AU'ların ortalamalarını döndür\n","    au_data = predictions[au_columns]\n","    return au_data.mean().to_frame().T  # DataFrame olarak döndür\n","\n","def process_video2(data):\n","    # Belirtilen AU'ları al\n","    selected_aus = data[au_new_ft1]\n","\n","    # Her bir sütundaki değerleri topla\n","    au_sum = selected_aus.sum(axis=1)  # Satır bazında topla\n","\n","    # Sütun sayısına böl ve karekökünü al\n","    num_aus = len(au_new_ft1)  # AU sütun sayısı (örneğin 12)\n","    au_std = (au_sum / num_aus).pow(0.5)  # Böl ve karekök al\n","\n","    # Sonucu DataFrame olarak döndür\n","    au_std = au_std.to_frame().T  # DataFrame'e çevir ve transpoze et\n","    return au_std\n","\n","\n","#!!!!!!!!!!!!!!!!!! YÜKSEK POZİTİF KORELASYONLU AU LAR:ÇARPMA İŞLEMİ\n","def process_video3(data):\n","    # Belirtilen AU'ları al\n","    selected_aus = data[au_new_ft2]\n","\n","    # Her bir sütundaki değerleri çarp\n","    au_prod = selected_aus.prod(axis=1)  # Satır bazında çarpma işlemi\n","    # Sonucu DataFrame olarak döndür\n","    au_std = au_prod.to_frame().T  # DataFrame'e çevir ve transpoze et\n","    return au_std\n","\n","\n","\n"],"metadata":{"id":"tzBsiTqOsSNO","executionInfo":{"status":"ok","timestamp":1728840173090,"user_tz":-180,"elapsed":2,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["# Parkinson ve sağlıklı hastalar için AU ortalamalarını ve durumlarını kaydetme\n","results = []\n","\n","for video_path in video_parkinsonspaths[0:2]:\n","    au_means = process_video(video_path)\n","    au_means['label'] = 1  # Parkinson hastası\n","    au_std = process_video2(au_means)  # Standart sapmayı al\n","\n","    au_means['std'] = au_std # Sadece ilk satırı al ve ekle\n","    au_means['hgh_cor'] = process_video3(au_means)\n","\n","    print(au_means)\n","    results.append(au_means)\n","\n","for video_path in video_healthypaths[0:2]:\n","    au_means = process_video(video_path)\n","    au_means['label'] = 0  # Sağlıklı birey\n","    au_std = process_video2(au_means)  # Standart sapmayı al\n","\n","    au_means['std'] = au_std # Sadece ilk satırı al ve ekle\n","    au_means['hgh_cor'] = process_video3(au_means)\n","\n","    results.append(au_means)\n","\n","# Sonuçları DataFrame'e dönüştür\n","df_results = pd.concat(results, ignore_index=True)  # Sonuçları birleştir"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LuzydRD0sSPi","executionInfo":{"status":"ok","timestamp":1728841063337,"user_tz":-180,"elapsed":890250,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"d33a917f-3791-4a5b-98e2-748661f0653d"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 28/28 [03:01<00:00,  6.49s/it]\n"]},{"output_type":"stream","name":"stdout","text":["       AU01      AU02      AU04      AU06      AU07     AU09      AU10  \\\n","0  0.739341  0.389137  0.208726  0.235911  0.178571  0.18054  0.497187   \n","\n","       AU11      AU12      AU14  ...      AU17  AU20      AU24      AU25  \\\n","0  0.357143  0.285332  0.614467  ...  0.511721   0.0  0.740831  0.157398   \n","\n","       AU26      AU28      AU43  label       std   hgh_cor  \n","0  0.236311  0.559193  0.032876      1  0.512474  0.547727  \n","\n","[1 rows x 21 columns]\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 36/36 [04:04<00:00,  6.78s/it]\n"]},{"output_type":"stream","name":"stdout","text":["       AU01      AU02      AU04      AU06      AU07      AU09      AU10  \\\n","0  0.499197  0.314272  0.414992  0.100573  0.277778  0.177886  0.200564   \n","\n","       AU11      AU12      AU14  ...      AU17  AU20      AU24      AU25  \\\n","0  0.055556  0.074413  0.399878  ...  0.700497   0.0  0.813216  0.037465   \n","\n","      AU26      AU28      AU43  label       std   hgh_cor  \n","0  0.30108  0.505913  0.232744      1  0.467449  0.405955  \n","\n","[1 rows x 21 columns]\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 30/30 [03:13<00:00,  6.44s/it]\n","100%|██████████| 39/39 [04:25<00:00,  6.81s/it]\n"]}]},{"cell_type":"code","source":["# Excel dosyasına kaydet\n","output_excel_path = '/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/machine_learningdata.xlsx'\n","df_results.to_excel(output_excel_path, index=False)\n","\n","print(f\"Sonuçlar {output_excel_path} dosyasına kaydedildi.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eZOJiCAJsSSC","executionInfo":{"status":"ok","timestamp":1728841064861,"user_tz":-180,"elapsed":1534,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"e714c951-9cb7-4460-bad5-85bcd8fe6151"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Sonuçlar /content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/au_means_results.xlsx dosyasına kaydedildi.\n"]}]},{"cell_type":"code","source":["print(type(df_results))\n","print(\"+++++++++++++\")\n","df_results.head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":240},"id":"DBW9VvcOsSUq","executionInfo":{"status":"ok","timestamp":1728841064861,"user_tz":-180,"elapsed":7,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"d50a407f-bfd5-4b1e-b23f-659980656ee0"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'feat.data.Fex'>\n","+++++++++++++\n"]},{"output_type":"execute_result","data":{"text/plain":["       AU01      AU02      AU04      AU06      AU07      AU09      AU10  \\\n","0  0.739341  0.389137  0.208726  0.235911  0.178571  0.180540  0.497187   \n","1  0.499197  0.314272  0.414992  0.100573  0.277778  0.177886  0.200564   \n","2  0.349971  0.234788  0.401915  0.292964  0.533333  0.194647  0.565399   \n","3  0.579360  0.378077  0.188389  0.216182  0.102564  0.173448  0.187470   \n","\n","       AU11      AU12      AU14  ...      AU17      AU20      AU24      AU25  \\\n","0  0.357143  0.285332  0.614467  ...  0.511721  0.000000  0.740831  0.157398   \n","1  0.055556  0.074413  0.399878  ...  0.700497  0.000000  0.813216  0.037465   \n","2  1.000000  0.355828  0.501694  ...  0.728470  0.000000  0.632704  0.026671   \n","3  0.948718  0.182375  0.484061  ...  0.706336  0.025641  0.676184  0.050876   \n","\n","       AU26      AU28      AU43  label       std   hgh_cor  \n","0  0.236311  0.559193  0.032876      1  0.512474  0.547727  \n","1  0.301080  0.505913  0.232744      1  0.467449  0.405955  \n","2  0.269984  0.568705  0.151332      0  0.610549  0.221428  \n","3  0.123844  0.283960  0.063232      0  0.517165  0.391754  \n","\n","[4 rows x 21 columns]"],"text/html":["\n","  <div id=\"df-599b8c78-596d-47be-aa4d-1a3fa179aa7a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AU01</th>\n","      <th>AU02</th>\n","      <th>AU04</th>\n","      <th>AU06</th>\n","      <th>AU07</th>\n","      <th>AU09</th>\n","      <th>AU10</th>\n","      <th>AU11</th>\n","      <th>AU12</th>\n","      <th>AU14</th>\n","      <th>...</th>\n","      <th>AU17</th>\n","      <th>AU20</th>\n","      <th>AU24</th>\n","      <th>AU25</th>\n","      <th>AU26</th>\n","      <th>AU28</th>\n","      <th>AU43</th>\n","      <th>label</th>\n","      <th>std</th>\n","      <th>hgh_cor</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.739341</td>\n","      <td>0.389137</td>\n","      <td>0.208726</td>\n","      <td>0.235911</td>\n","      <td>0.178571</td>\n","      <td>0.180540</td>\n","      <td>0.497187</td>\n","      <td>0.357143</td>\n","      <td>0.285332</td>\n","      <td>0.614467</td>\n","      <td>...</td>\n","      <td>0.511721</td>\n","      <td>0.000000</td>\n","      <td>0.740831</td>\n","      <td>0.157398</td>\n","      <td>0.236311</td>\n","      <td>0.559193</td>\n","      <td>0.032876</td>\n","      <td>1</td>\n","      <td>0.512474</td>\n","      <td>0.547727</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.499197</td>\n","      <td>0.314272</td>\n","      <td>0.414992</td>\n","      <td>0.100573</td>\n","      <td>0.277778</td>\n","      <td>0.177886</td>\n","      <td>0.200564</td>\n","      <td>0.055556</td>\n","      <td>0.074413</td>\n","      <td>0.399878</td>\n","      <td>...</td>\n","      <td>0.700497</td>\n","      <td>0.000000</td>\n","      <td>0.813216</td>\n","      <td>0.037465</td>\n","      <td>0.301080</td>\n","      <td>0.505913</td>\n","      <td>0.232744</td>\n","      <td>1</td>\n","      <td>0.467449</td>\n","      <td>0.405955</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.349971</td>\n","      <td>0.234788</td>\n","      <td>0.401915</td>\n","      <td>0.292964</td>\n","      <td>0.533333</td>\n","      <td>0.194647</td>\n","      <td>0.565399</td>\n","      <td>1.000000</td>\n","      <td>0.355828</td>\n","      <td>0.501694</td>\n","      <td>...</td>\n","      <td>0.728470</td>\n","      <td>0.000000</td>\n","      <td>0.632704</td>\n","      <td>0.026671</td>\n","      <td>0.269984</td>\n","      <td>0.568705</td>\n","      <td>0.151332</td>\n","      <td>0</td>\n","      <td>0.610549</td>\n","      <td>0.221428</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.579360</td>\n","      <td>0.378077</td>\n","      <td>0.188389</td>\n","      <td>0.216182</td>\n","      <td>0.102564</td>\n","      <td>0.173448</td>\n","      <td>0.187470</td>\n","      <td>0.948718</td>\n","      <td>0.182375</td>\n","      <td>0.484061</td>\n","      <td>...</td>\n","      <td>0.706336</td>\n","      <td>0.025641</td>\n","      <td>0.676184</td>\n","      <td>0.050876</td>\n","      <td>0.123844</td>\n","      <td>0.283960</td>\n","      <td>0.063232</td>\n","      <td>0</td>\n","      <td>0.517165</td>\n","      <td>0.391754</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>4 rows × 21 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-599b8c78-596d-47be-aa4d-1a3fa179aa7a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-599b8c78-596d-47be-aa4d-1a3fa179aa7a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-599b8c78-596d-47be-aa4d-1a3fa179aa7a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ed135f65-5e04-47f3-9a7e-f12725fa4ac3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ed135f65-5e04-47f3-9a7e-f12725fa4ac3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ed135f65-5e04-47f3-9a7e-f12725fa4ac3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_results"}},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["# Korelasyon matrisini hesapla\n","correlation_matrix = df_results.corr()\n","\n","# Label ile olan korelasyonları seç\n","label_correlation = correlation_matrix['label'].drop('label')\n","\n","# Korelasyonları çiz\n","plt.figure(figsize=(10, 6))\n","sns.barplot(x=label_correlation.index, y=label_correlation.values)\n","plt.title('AU Özelliklerinin Label ile Korelasyonu')\n","plt.xlabel('Affect Units (AU)')\n","plt.ylabel('Korelasyon')\n","plt.xticks(rotation=45)\n","plt.axhline(0, color='gray', lw=1)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":601},"id":"JjfhLA5usSXS","executionInfo":{"status":"ok","timestamp":1728841065662,"user_tz":-180,"elapsed":805,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"63897cae-dec8-4deb-fef5-5cab7ddb3603"},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"PstH0x4CsSca","executionInfo":{"status":"ok","timestamp":1728841065662,"user_tz":-180,"elapsed":11,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"XrepQ-5fsSfG","executionInfo":{"status":"ok","timestamp":1728841065662,"user_tz":-180,"elapsed":10,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"eOsVABa8sSiA","executionInfo":{"status":"ok","timestamp":1728841065662,"user_tz":-180,"elapsed":10,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"hitqpzjUsSkW","executionInfo":{"status":"ok","timestamp":1728841065663,"user_tz":-180,"elapsed":11,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"4m5v30SrsSm5","executionInfo":{"status":"ok","timestamp":1728841065663,"user_tz":-180,"elapsed":11,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"TjfEn4VAsSpq","executionInfo":{"status":"ok","timestamp":1728841065663,"user_tz":-180,"elapsed":11,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"r2AbbudEsSsm","executionInfo":{"status":"ok","timestamp":1728841065663,"user_tz":-180,"elapsed":11,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"NRAA_c-lsSvf","executionInfo":{"status":"ok","timestamp":1728841065663,"user_tz":-180,"elapsed":10,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"UCYAvVIssSyP","executionInfo":{"status":"ok","timestamp":1728841065663,"user_tz":-180,"elapsed":10,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"fPBJJ97PsS1W","executionInfo":{"status":"ok","timestamp":1728841065663,"user_tz":-180,"elapsed":10,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"PZ6okVOesS4C","executionInfo":{"status":"ok","timestamp":1728841065663,"user_tz":-180,"elapsed":10,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"4X2_lMfAsS6v","executionInfo":{"status":"ok","timestamp":1728841065663,"user_tz":-180,"elapsed":10,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"58xtYQEosS9f","executionInfo":{"status":"ok","timestamp":1728841065663,"user_tz":-180,"elapsed":10,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"nDIm0Gg3sTAS","executionInfo":{"status":"ok","timestamp":1728841065663,"user_tz":-180,"elapsed":10,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"_9Woc9gCsTCr","executionInfo":{"status":"ok","timestamp":1728841065663,"user_tz":-180,"elapsed":9,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Rch-K2w1sTFP","executionInfo":{"status":"ok","timestamp":1728841065663,"user_tz":-180,"elapsed":9,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"HaoQGoV7sTIC","executionInfo":{"status":"ok","timestamp":1728841065663,"user_tz":-180,"elapsed":9,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"8B9rR0MbsTMm","executionInfo":{"status":"ok","timestamp":1728841065663,"user_tz":-180,"elapsed":9,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Ikqt5qiusTPW","executionInfo":{"status":"ok","timestamp":1728841065663,"user_tz":-180,"elapsed":9,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"NwU09GNnsTRy","executionInfo":{"status":"ok","timestamp":1728841065663,"user_tz":-180,"elapsed":9,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"9UlzCtxksTUh","executionInfo":{"status":"ok","timestamp":1728841065663,"user_tz":-180,"elapsed":8,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"bm32X3YOsTXH","executionInfo":{"status":"ok","timestamp":1728841065663,"user_tz":-180,"elapsed":8,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"wkqWGWPVsTZ7","executionInfo":{"status":"ok","timestamp":1728841065664,"user_tz":-180,"elapsed":9,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"UbGiS16WsTcv","executionInfo":{"status":"ok","timestamp":1728841065664,"user_tz":-180,"elapsed":9,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"y3XKGc-NsTfK","executionInfo":{"status":"ok","timestamp":1728841065664,"user_tz":-180,"elapsed":9,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"L9Gx9qNwsTiP","executionInfo":{"status":"ok","timestamp":1728841065664,"user_tz":-180,"elapsed":9,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"iOHVVlR1sTnv","executionInfo":{"status":"ok","timestamp":1728841065664,"user_tz":-180,"elapsed":9,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]}]}