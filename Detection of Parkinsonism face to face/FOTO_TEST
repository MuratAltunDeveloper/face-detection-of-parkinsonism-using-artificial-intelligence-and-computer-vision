{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOmNe4tbVoRRJJSVjgOp/zX"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!pip install -q py-feat"],"metadata":{"id":"-WMv5w1m9ThN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from feat import Detector\n","\n","detector = Detector(\n","    face_model=\"retinaface\",\n","    landmark_model=\"mobilefacenet\",\n","    au_model='xgb',\n","    emotion_model=\"resmasknet\",\n","    facepose_model=\"img2pose\",\n",")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y7Yvl2sjAiDd","executionInfo":{"status":"ok","timestamp":1728224524723,"user_tz":-180,"elapsed":11007,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"c29293db-5d01-4761-80ad-de6c2dfedf25"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/feat/face_detectors/Retinaface/Retinaface_test.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  pretrained_dict = torch.load(\n","/usr/local/lib/python3.10/dist-packages/feat/detector.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  checkpoint = torch.load(\n","/usr/local/lib/python3.10/dist-packages/feat/facepose_detectors/img2pose/img2pose_test.py:105: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  checkpoint = torch.load(model_path, map_location=self.device)\n","/usr/local/lib/python3.10/dist-packages/feat/emo_detectors/ResMaskNet/resmasknet_test.py:718: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  torch.load(\n","/usr/local/lib/python3.10/dist-packages/feat/identity_detectors/facenet/facenet_model.py:275: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  torch.load(\n"]}]},{"cell_type":"code","source":["detector"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YfSFMbUFAiLD","executionInfo":{"status":"ok","timestamp":1728224524724,"user_tz":-180,"elapsed":14,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"b14a3b7c-78db-4fd7-ac0c-cdd8a10eac4e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["feat.detector.Detector(face_model=retinaface, landmark_model=mobilefacenet, au_model=xgb, emotion_model=resmasknet, facepose_model=img2pose, identity_model=facenet)"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["#Google Drive'ındaki dosyalara erişim sağlamak için\n","from google.colab import drive\n","drive.mount('/content/drive')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i3TTStDnM8Ya","executionInfo":{"status":"ok","timestamp":1728224542991,"user_tz":-180,"elapsed":18280,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"536fa84c-6f8d-47f4-f25b-b8bd9a7a2fce"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["\n","# 2. Gerekli kütüphaneleri içe aktar\n","from feat.utils.io import get_test_data_path\n","from feat.plotting import imshow\n","import os\n","\n","# 3. Test verileri için dosya yolu belirle\n","test_data_dir = get_test_data_path()\n","\n","# 4. Görüntü dosyasının tam yolunu al\n","single_face_img_path = os.path.join(test_data_dir, \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/foto_little_girl.jpg\")\n","\n","# 5. Görüntüyü göster\n","imshow(single_face_img_path)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":191},"id":"UTtBSdaVLNlJ","executionInfo":{"status":"ok","timestamp":1728224543986,"user_tz":-180,"elapsed":996,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"c4e444e7-2678-4079-a1ee-f6ed9c357255"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 300x300 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["single_face_prediction = detector.detect_image(single_face_img_path)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"24VMGkRVLNn5","executionInfo":{"status":"ok","timestamp":1728224555921,"user_tz":-180,"elapsed":6980,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"1e8a9480-77d8-40fa-a94d-3359c49573e4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 1/1 [00:06<00:00,  6.70s/it]\n"]}]},{"cell_type":"code","source":["# Show results\n","single_face_prediction"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":130},"id":"tkTSMXzmLNqd","executionInfo":{"status":"ok","timestamp":1728224559781,"user_tz":-180,"elapsed":636,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"9b824818-ec60-4efc-f333-b7e0486ab855"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    FaceRectX  FaceRectY  FaceRectWidth  FaceRectHeight  FaceScore  \\\n","0  292.854697   4.393723     281.316373      305.180825   0.999027   \n","\n","          x_0         x_1         x_2         x_3         x_4  ...  \\\n","0  296.928661  302.759976  311.829509  323.688264  341.235299  ...   \n","\n","   Identity_505  Identity_506  Identity_507  Identity_508  Identity_509  \\\n","0     -0.067669      0.037096      0.071648     -0.004461     -0.058404   \n","\n","   Identity_510  Identity_511  Identity_512  \\\n","0      -0.05676      0.004716     -0.027535   \n","\n","                                               input  frame  \n","0  /content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubi...      0  \n","\n","[1 rows x 686 columns]"],"text/html":["\n","  <div id=\"df-92976446-c143-4883-b784-36313bd0bee8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FaceRectX</th>\n","      <th>FaceRectY</th>\n","      <th>FaceRectWidth</th>\n","      <th>FaceRectHeight</th>\n","      <th>FaceScore</th>\n","      <th>x_0</th>\n","      <th>x_1</th>\n","      <th>x_2</th>\n","      <th>x_3</th>\n","      <th>x_4</th>\n","      <th>...</th>\n","      <th>Identity_505</th>\n","      <th>Identity_506</th>\n","      <th>Identity_507</th>\n","      <th>Identity_508</th>\n","      <th>Identity_509</th>\n","      <th>Identity_510</th>\n","      <th>Identity_511</th>\n","      <th>Identity_512</th>\n","      <th>input</th>\n","      <th>frame</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>292.854697</td>\n","      <td>4.393723</td>\n","      <td>281.316373</td>\n","      <td>305.180825</td>\n","      <td>0.999027</td>\n","      <td>296.928661</td>\n","      <td>302.759976</td>\n","      <td>311.829509</td>\n","      <td>323.688264</td>\n","      <td>341.235299</td>\n","      <td>...</td>\n","      <td>-0.067669</td>\n","      <td>0.037096</td>\n","      <td>0.071648</td>\n","      <td>-0.004461</td>\n","      <td>-0.058404</td>\n","      <td>-0.05676</td>\n","      <td>0.004716</td>\n","      <td>-0.027535</td>\n","      <td>/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubi...</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1 rows × 686 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-92976446-c143-4883-b784-36313bd0bee8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-92976446-c143-4883-b784-36313bd0bee8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-92976446-c143-4883-b784-36313bd0bee8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","  <div id=\"id_df29f48a-0a49-4689-abe2-918477a81f44\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('single_face_prediction')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_df29f48a-0a49-4689-abe2-918477a81f44 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('single_face_prediction');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"single_face_prediction"}},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["single_face_prediction.faceboxes\n","#Bu öznitelik, analiz edilen görüntüde tespit edilen yüzlerin konumları ve boyutları hakkında bilgi sağlar."],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":81},"id":"IjLu6Ve8LNs6","executionInfo":{"status":"ok","timestamp":1728224601966,"user_tz":-180,"elapsed":330,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"e3636f4e-9e73-47bb-fdc5-f2fdd2ad9f22"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    FaceRectX  FaceRectY  FaceRectWidth  FaceRectHeight  FaceScore\n","0  292.854697   4.393723     281.316373      305.180825   0.999027"],"text/html":["\n","  <div id=\"df-52c61fa1-d255-462d-a372-c7aaea6302e0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FaceRectX</th>\n","      <th>FaceRectY</th>\n","      <th>FaceRectWidth</th>\n","      <th>FaceRectHeight</th>\n","      <th>FaceScore</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>292.854697</td>\n","      <td>4.393723</td>\n","      <td>281.316373</td>\n","      <td>305.180825</td>\n","      <td>0.999027</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-52c61fa1-d255-462d-a372-c7aaea6302e0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-52c61fa1-d255-462d-a372-c7aaea6302e0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-52c61fa1-d255-462d-a372-c7aaea6302e0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"single_face_prediction\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"FaceRectX\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 292.8546973423184,\n        \"max\": 292.8546973423184,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          292.8546973423184\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FaceRectY\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4.393723358664402,\n        \"max\": 4.393723358664402,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4.393723358664402\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FaceRectWidth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 281.3163728031605,\n        \"max\": 281.3163728031605,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          281.3163728031605\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FaceRectHeight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 305.18082540700607,\n        \"max\": 305.18082540700607,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          305.18082540700607\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FaceScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9990266561508179,\n        \"max\": 0.9990266561508179,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9990266561508179\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["single_face_prediction.aus\n","# Aksiyon Birimleri hakkında bilgi içerir\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":81},"id":"gmY7ecbHLNve","executionInfo":{"status":"ok","timestamp":1728224609628,"user_tz":-180,"elapsed":293,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"dd07edd5-e02b-4a21-8105-fa8f209fcff7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       AU01      AU02     AU04      AU05      AU06  AU07      AU09      AU10  \\\n","0  0.671499  0.436386  0.74912  0.500774  0.256385   0.0  0.401605  0.567642   \n","\n","   AU11      AU12      AU14      AU15      AU17  AU20      AU23      AU24  \\\n","0   1.0  0.053331  0.081059  0.346969  0.224215   1.0  0.564055  0.011867   \n","\n","       AU25      AU26      AU28      AU43  \n","0  0.999959  0.690492  0.049883  0.130677  "],"text/html":["\n","  <div id=\"df-a29493d3-1c13-4f08-b1a1-e9cc7cb7c8e1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AU01</th>\n","      <th>AU02</th>\n","      <th>AU04</th>\n","      <th>AU05</th>\n","      <th>AU06</th>\n","      <th>AU07</th>\n","      <th>AU09</th>\n","      <th>AU10</th>\n","      <th>AU11</th>\n","      <th>AU12</th>\n","      <th>AU14</th>\n","      <th>AU15</th>\n","      <th>AU17</th>\n","      <th>AU20</th>\n","      <th>AU23</th>\n","      <th>AU24</th>\n","      <th>AU25</th>\n","      <th>AU26</th>\n","      <th>AU28</th>\n","      <th>AU43</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.671499</td>\n","      <td>0.436386</td>\n","      <td>0.74912</td>\n","      <td>0.500774</td>\n","      <td>0.256385</td>\n","      <td>0.0</td>\n","      <td>0.401605</td>\n","      <td>0.567642</td>\n","      <td>1.0</td>\n","      <td>0.053331</td>\n","      <td>0.081059</td>\n","      <td>0.346969</td>\n","      <td>0.224215</td>\n","      <td>1.0</td>\n","      <td>0.564055</td>\n","      <td>0.011867</td>\n","      <td>0.999959</td>\n","      <td>0.690492</td>\n","      <td>0.049883</td>\n","      <td>0.130677</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a29493d3-1c13-4f08-b1a1-e9cc7cb7c8e1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a29493d3-1c13-4f08-b1a1-e9cc7cb7c8e1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a29493d3-1c13-4f08-b1a1-e9cc7cb7c8e1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"single_face_prediction\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"AU01\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.6714993715286255\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AU02\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.43638554215431213\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AU04\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.7491195797920227\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AU05\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.500773549079895\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AU06\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.2563847005367279\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AU07\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AU09\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.40160462260246277\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AU10\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.567642331123352\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AU11\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AU12\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.05333058163523674\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AU14\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.08105913549661636\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AU15\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.3469689190387726\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AU17\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.22421476244926453\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AU20\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AU23\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.5640549063682556\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AU24\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.011867102235555649\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AU25\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9999592304229736\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AU26\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.6904916167259216\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AU28\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.04988342896103859\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AU43\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.1306769847869873\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["single_face_prediction.emotions#analiz edilen görüntüdeki yüz ifadelerinden çıkarılan duygusal durumlar"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":81},"id":"yr9a_0qnLNx5","executionInfo":{"status":"ok","timestamp":1728224624447,"user_tz":-180,"elapsed":4,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"639f34b8-0ac4-4979-d917-481e8bf7ba2e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      anger   disgust      fear  happiness  sadness  surprise   neutral\n","0  0.000996  0.000002  0.002475   0.000407  0.00007  0.995451  0.000598"],"text/html":["\n","  <div id=\"df-16ca52b1-e9ae-4f6c-b2cf-514db16871cb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>anger</th>\n","      <th>disgust</th>\n","      <th>fear</th>\n","      <th>happiness</th>\n","      <th>sadness</th>\n","      <th>surprise</th>\n","      <th>neutral</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.000996</td>\n","      <td>0.000002</td>\n","      <td>0.002475</td>\n","      <td>0.000407</td>\n","      <td>0.00007</td>\n","      <td>0.995451</td>\n","      <td>0.000598</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-16ca52b1-e9ae-4f6c-b2cf-514db16871cb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-16ca52b1-e9ae-4f6c-b2cf-514db16871cb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-16ca52b1-e9ae-4f6c-b2cf-514db16871cb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"single_face_prediction\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"anger\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0009963541524484754\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"disgust\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2.3303373382077552e-06\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fear\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0024749827571213245\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"happiness\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.00040710740722715855\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sadness\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          7.035000453470275e-05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"surprise\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.995451033115387\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"neutral\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0005978888948448002\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["single_face_prediction.poses # (in degrees)\n","\n","'''\n","Yaw: Yatay eksen etrafındaki dönme (yüzün sağa veya sola dönmesi).\n","Pitch: Dikey eksen etrafındaki dönme (başın yukarı veya aşağı eğilmesi).\n","Roll: Başın kendi etrafında dönmesi (başın sağa veya sola doğru eğilmesi).\n","\n","'''"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":81},"id":"lvBF8nT5LN0h","executionInfo":{"status":"ok","timestamp":1728224639758,"user_tz":-180,"elapsed":311,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"81076a1d-f578-4a56-db06-1add85baaacd"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Pitch      Roll      Yaw\n","0  5.834745 -1.900573 -1.24396"],"text/html":["\n","  <div id=\"df-e9d632d4-04d3-4bff-a53d-97a84979a085\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pitch</th>\n","      <th>Roll</th>\n","      <th>Yaw</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.834745</td>\n","      <td>-1.900573</td>\n","      <td>-1.24396</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e9d632d4-04d3-4bff-a53d-97a84979a085')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e9d632d4-04d3-4bff-a53d-97a84979a085 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e9d632d4-04d3-4bff-a53d-97a84979a085');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"single_face_prediction\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Pitch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 5.834744861008756,\n        \"max\": 5.834744861008756,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          5.834744861008756\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Roll\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": -1.9005726965255985,\n        \"max\": -1.9005726965255985,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -1.9005726965255985\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Yaw\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": -1.243959994960776,\n        \"max\": -1.243959994960776,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -1.243959994960776\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":[],"metadata":{"id":"Q3bT4v2RLN2Z"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# HANGİ AULARI KULLANMALIYIM ONUN HAKKINDA BİR ÇALIŞMA"],"metadata":{"id":"8SRXz_UMUZZd"}},{"cell_type":"code","source":["# İlgilendiğimiz AU'ları kontrol et\n","relevant_aus = ['AU01', 'AU02', 'AU04', 'AU05', 'AU06', 'AU12', 'AU25', 'AU26', 'AU27', 'AU43', 'AU45']\n"],"metadata":{"id":"5vXDxkKdAiNh"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["AU1 Serisi\tİç Kaş Kaldırıcı\n","AU2 Serisi\tDış Kaş Kaldırıcı\n","AU4 Serisi\tKaş Aşağı\n","AU5 Serisi\tÜst Kapak Yükseltici\n","AU6 Serisi\tYanak Kaldırıcı\n","AU12 Serisi\tDudak Köşe Çektirmesi\n","AU25 Serisi\tDudak Kısmı\n","AU26 Serisi\tÇene Düşmesi\n","AU27 Serisi\tAğız Germe\n","AU43 Serisi\tGözler Kapalı\n","AU45 Serisi\tGöz kırpmak  veya AU46 Serisi\tGöz kırpmak"],"metadata":{"id":"vLBLax6eV4I1"}},{"cell_type":"code","source":[],"metadata":{"id":"h686tCyK9TkA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"zEccKWcv9TmA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"F_ZrwZM_9Ton"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"THELJEK89Tq_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"kkHmOJ4T9TtY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"EaDj-ByX9Tv5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"WssLW5ME9TyP"},"execution_count":null,"outputs":[]}]}