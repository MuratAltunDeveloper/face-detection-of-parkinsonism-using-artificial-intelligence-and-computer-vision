{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOxo54UxonpsQGBSrX4udoD"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CfmDKkrk9msE","executionInfo":{"status":"ok","timestamp":1728876857077,"user_tz":-180,"elapsed":16421,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"2fb22909-c102-462c-dc82-5e39dfe90654"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (1.23.5)\n","Collecting numpy\n","  Using cached numpy-2.1.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (60 kB)\n","Using cached numpy-2.1.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (16.3 MB)\n","Installing collected packages: numpy\n","  Attempting uninstall: numpy\n","    Found existing installation: numpy 1.23.5\n","    Uninstalling numpy-1.23.5:\n","      Successfully uninstalled numpy-1.23.5\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","cudf-cu12 24.6.1 requires numpy<2.0a0,>=1.23, but you have numpy 2.1.2 which is incompatible.\n","cupy-cuda12x 12.2.0 requires numpy<1.27,>=1.20, but you have numpy 2.1.2 which is incompatible.\n","gensim 4.3.3 requires numpy<2.0,>=1.18.5, but you have numpy 2.1.2 which is incompatible.\n","nltools 0.5.1 requires numpy<1.24, but you have numpy 2.1.2 which is incompatible.\n","numba 0.60.0 requires numpy<2.1,>=1.22, but you have numpy 2.1.2 which is incompatible.\n","pytensor 2.25.5 requires numpy<2,>=1.17.0, but you have numpy 2.1.2 which is incompatible.\n","rmm-cu12 24.6.0 requires numpy<2.0a0,>=1.23, but you have numpy 2.1.2 which is incompatible.\n","tensorflow 2.17.0 requires numpy<2.0.0,>=1.23.5; python_version <= \"3.11\", but you have numpy 2.1.2 which is incompatible.\n","thinc 8.2.5 requires numpy<2.0.0,>=1.19.0; python_version >= \"3.9\", but you have numpy 2.1.2 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed numpy-2.1.2\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","albucore 0.0.16 requires numpy>=1.24, but you have numpy 1.23.5 which is incompatible.\n","albumentations 1.4.15 requires numpy>=1.24.4, but you have numpy 1.23.5 which is incompatible.\n","bigframes 1.21.0 requires numpy>=1.24.0, but you have numpy 1.23.5 which is incompatible.\n","chex 0.1.87 requires numpy>=1.24.1, but you have numpy 1.23.5 which is incompatible.\n","jax 0.4.33 requires numpy>=1.24, but you have numpy 1.23.5 which is incompatible.\n","jaxlib 0.4.33 requires numpy>=1.24, but you have numpy 1.23.5 which is incompatible.\n","xarray 2024.9.0 requires numpy>=1.24, but you have numpy 1.23.5 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0m"]}],"source":["!pip install --upgrade numpy\n","\n","!pip install -q py-feat"]},{"cell_type":"code","source":["import os\n","from feat import Detector\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from google.colab import drive"],"metadata":{"id":"iXnlO6uR9q0S","executionInfo":{"status":"ok","timestamp":1728876857077,"user_tz":-180,"elapsed":3,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# Google Drive'ı bağla\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vPcyQ_u19q26","executionInfo":{"status":"ok","timestamp":1728876859242,"user_tz":-180,"elapsed":2168,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"50d46f2f-b80d-4337-be72-e2749597ce37"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["# Detector'ı yapılandır\n","detector = Detector(\n","    face_model=\"retinaface\",\n","    landmark_model=\"mobilefacenet\",\n","    au_model='xgb',\n","    emotion_model=\"resmasknet\",\n","    facepose_model=\"img2pose\",\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A1ko899I9q5W","executionInfo":{"status":"ok","timestamp":1728876917007,"user_tz":-180,"elapsed":57767,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"9df5a555-f951-4c88-918b-157bc56a63b7"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 1786259/1786259 [00:00<00:00, 37812029.15it/s]\n","100%|██████████| 12281146/12281146 [00:00<00:00, 88781978.11it/s]\n","100%|██████████| 965545/965545 [00:00<00:00, 20289118.73it/s]\n","100%|██████████| 33635572/33635572 [00:00<00:00, 92597113.73it/s]\n","100%|██████████| 130263/130263 [00:00<00:00, 10437125.05it/s]\n","100%|██████████| 45886076/45886076 [00:00<00:00, 84761206.70it/s]\n","100%|██████████| 130263/130263 [00:00<00:00, 6987270.40it/s]\n","100%|██████████| 53851068/53851068 [00:00<00:00, 73137685.54it/s]\n","100%|██████████| 130263/130263 [00:00<00:00, 9499645.69it/s]\n","100%|██████████| 166975/166975 [00:00<00:00, 7396097.94it/s]\n","100%|██████████| 530776/530776 [00:00<00:00, 10418696.91it/s]\n","100%|██████████| 493515/493515 [00:00<00:00, 4410402.70it/s]\n","100%|██████████| 207163/207163 [00:00<00:00, 10280826.34it/s]\n","100%|██████████| 1151853/1151853 [00:00<00:00, 27906618.18it/s]\n","100%|██████████| 572282/572282 [00:00<00:00, 15912840.47it/s]\n","100%|██████████| 330487/330487 [00:00<00:00, 11029128.64it/s]\n","100%|██████████| 335449/335449 [00:00<00:00, 14477733.35it/s]\n","100%|██████████| 586893/586893 [00:00<00:00, 16993598.13it/s]\n","100%|██████████| 206931/206931 [00:00<00:00, 12069355.89it/s]\n","100%|██████████| 689547/689547 [00:00<00:00, 18836710.80it/s]\n","100%|██████████| 583629/583629 [00:00<00:00, 20346073.19it/s]\n","100%|██████████| 207077/207077 [00:00<00:00, 11513194.63it/s]\n","100%|██████████| 256865/256865 [00:00<00:00, 12871495.27it/s]\n","100%|██████████| 1079268/1079268 [00:00<00:00, 24527937.80it/s]\n","100%|██████████| 1952633/1952633 [00:00<00:00, 47702439.32it/s]\n","100%|██████████| 312240/312240 [00:00<00:00, 13158534.68it/s]\n","100%|██████████| 524139/524139 [00:00<00:00, 16827267.05it/s]\n","100%|██████████| 77744/77744 [00:00<00:00, 5448957.61it/s]\n","100%|██████████| 551634217/551634217 [00:05<00:00, 101284892.74it/s]\n","100%|██████████| 448/448 [00:00<00:00, 369164.67it/s]\n","100%|██████████| 944/944 [00:00<00:00, 415033.85it/s]\n","100%|██████████| 169843940/169843940 [00:01<00:00, 106967931.85it/s]\n","100%|██████████| 176/176 [00:00<00:00, 178826.91it/s]\n","100%|██████████| 176/176 [00:00<00:00, 93810.84it/s]\n","100%|██████████| 111898327/111898327 [00:01<00:00, 107527819.95it/s]\n","/usr/local/lib/python3.10/dist-packages/feat/face_detectors/Retinaface/Retinaface_test.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  pretrained_dict = torch.load(\n","/usr/local/lib/python3.10/dist-packages/feat/detector.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  checkpoint = torch.load(\n","Downloading: \"https://download.pytorch.org/models/resnet18-f37072fd.pth\" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth\n","100%|██████████| 44.7M/44.7M [00:00<00:00, 80.9MB/s]\n","/usr/local/lib/python3.10/dist-packages/feat/facepose_detectors/img2pose/img2pose_test.py:105: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  checkpoint = torch.load(model_path, map_location=self.device)\n","/usr/local/lib/python3.10/dist-packages/feat/emo_detectors/ResMaskNet/resmasknet_test.py:718: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  torch.load(\n","/usr/local/lib/python3.10/dist-packages/feat/identity_detectors/facenet/facenet_model.py:275: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  torch.load(\n"]}]},{"cell_type":"code","source":["# Video ana klasörü\n","folder_parkinsonpath = '/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head'\n","folder_healthypath = '/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head'\n","\n","# İzin verilen video dosya uzantıları\n","video_extensions = ['.mp4', '.avi', '.mkv', '.mov']\n","\n","# Klasördeki video dosyalarının yollarını listeleme\n","video_parkinsonspaths = [os.path.join(folder_parkinsonpath, file) for file in os.listdir(folder_parkinsonpath)\n","               if any(file.lower().endswith(ext) for ext in video_extensions)]\n","\n","video_healthypaths = [os.path.join(folder_healthypath, file) for file in os.listdir(folder_healthypath)\n","               if any(file.lower().endswith(ext) for ext in video_extensions)]\n","\n","# Sonuçları yazdır\n","for video_path in video_parkinsonspaths:\n","    print(video_path)\n","print(\"\\n**************** \\n\")\n","for video_path in video_healthypaths:\n","    print(video_path)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TE59RVjP9q8C","executionInfo":{"status":"ok","timestamp":1728876917810,"user_tz":-180,"elapsed":813,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"8e3a53a2-8ffc-41d9-96f2-eb239c36d93a"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/ali-cebeci-durus-tekayak-1-trim-merged-2_vICXcgYD.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/bahtiyar-tegun-durus-tekayak-1-trim-merged_4M4vhIE0.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/hanifi-saglam-durus-tekayak-1-trim-merged-3_MMpNTsmc.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/cihan-kurt-durus-tekayak-ata-trim-merged_8YDSW17r.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/ilknur-ustaoglu-durus-tekayak-2-trim-merged-3_gwzE0p7c.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/hizir-canca-durus-tekayak-3-trim_o9kQzG1m.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/mehmet-eryigit-durus-tekayak-1-trim-merged_kzLuULsa.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/hatice-cebeci-durus-tekayak-trim-merged_IDGIqZaw.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/munip-ozcelik-durus-tekayak-1-trim-merged_Hjs6nKrM.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/rasim-pamuk-durus-tekayak-ata-trim-merged_qX1eqSBq.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/salih-zeki-yaman-durus-tekayak-ata-trim-merged-1_7TdJPPmX.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/turgut-kiraci-durus-tekayak-efe-trim-merged-1_EAjU78OV.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/sevli-okumus-durus-tekayak-1-trim_RKYEEnXU.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/yusuf-albayrak-durus-tekayak-8-trim-merged-1_mwGaCEIs.mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/parkinsons_head/zeki-kahvecioglu-durus-tekayak-2-trim_saJBdXxx.mp4\n","\n","**************** \n","\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/canan-karaman-durus-tekayak-3-trim-merged-1_s9hUjGzM (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/ekrem-sarlayan-durus-tekayak-2-trim-merged-1_Trk5fdSv (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/faruk-tunca-durus-tekayak-3-trim-merged-1_ZkktaE85 (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/gullu-cakmakci-durus-tekayak-1-trim-merged-1_aDeFOjfX (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/halide-hale-ucar-durus-tekayak-2-trim-merged-1_RRKx3svS (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/kamuran-tan-durus-tekayak-1-trim-merged-1_ek1KUtpj (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/naci-sari-durus-tekayak-1-trim-merged_gJEQxmqd (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/necip-gursoy-durus-tekayak-4-trim-merged-2_lFmtSUpW (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/nermin-sari-durus-tekayak-1-trim-merged-1_9VJhuCmq (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/recep-bayhan-durus-tekayak-2-trim-merged-2_7uuOk1tL (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/samime-sever-durus-tekayak-1-trim-merged_sRSRlhDD (2).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/sebahat-gokgoz-durus-tekayak-1-trim-merged-2_yTT56cSw (2).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/selver-ozon-durus-tekayak-1-trim-merged-1_C9GX0qlh (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/semiha-yildiz-durus-tekayak-3-trim-merged-1_2dXiAMo8 (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/sahizer-balkan-durus-tekayak-trim-merged-3_a9UZ2MDK (1).mp4\n","/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy_head/yusuf-gokgoz-durus-tekayak-2-trim-merged-2_WEKqbzSA (1).mp4\n"]}]},{"cell_type":"code","source":["au_columns = [\n","    'AU01', 'AU02',  'AU04',\n","    'AU06', 'AU07',  'AU09', 'AU10',\n","    'AU11', 'AU12', 'AU14', 'AU15',\n","     'AU17', 'AU20', 'AU24', 'AU25',\n","    'AU26', 'AU28', 'AU43'\n","\n","]\n","\n","#!!!  Yüz Kaslarının Aktivasyon Oranları  formülü\n","au_new_ft1=[\n","    'AU02',  # Dış Kaş Kaldırıcı (Frontalis - lateral)\n","\n","\n","    'AU06',  # Yanak Kaldırıcı (Orbicularis Oculi - orbital)\n","    'AU07',  # Kapak Sıkılaştırıcı (Orbicularis Oculi - palpebral)\n","    'AU09',  # Burun Kırışıklığı (Levator Labii Superioris Alaeque Nasi)\n","    'AU11',\n","    'AU12',  # Dudak Köşe Çektirmesi (Zygomaticus majör)\n","    'AU15',  # Dudak Köşe Bastırıcı (Depresör Anguli Oris)\n","    'AU20',  # Dudak Sedyesi (Risorius, Platysma)\n","\n","    'AU25',  # Dudak Kısmı (Depresör Labii inferioris)\n","    'AU26',  # Çene Düşmesi (Masseter, Temporalis)\n","\n","]\n","\n","#!!! YÜKSEK  POZİTİF KORELASYON\n","au_new_ft2=[\n","    'AU01',\n","    'AU24'\n","\n","]\n","\n","\n","\n","def process_video(video_path):\n","    predictions = detector.detect_video(video_path, skip_frames=4)#skip_frames=0 ise tüm kareleri okur?skip_frames=0  ZeroDivisionError: division by zero hatası atıyor\n","\n","    # AU'ların ortalamalarını döndür\n","    au_data = predictions[au_columns]\n","    return au_data.mean().to_frame().T  # DataFrame olarak döndür\n","\n","def process_video2(data):\n","    # Belirtilen AU'ları al\n","    selected_aus = data[au_new_ft1]\n","\n","    # Her bir sütundaki değerleri topla\n","    au_sum = selected_aus.sum(axis=1)  # Satır bazında topla\n","\n","    # Sütun sayısına böl ve karekökünü al\n","    num_aus = len(au_new_ft1)  # AU sütun sayısı (örneğin 12)\n","    au_std = (au_sum / num_aus).pow(0.5)  # Böl ve karekök al\n","\n","    # Sonucu DataFrame olarak döndür\n","    au_std = au_std.to_frame().T  # DataFrame'e çevir ve transpoze et\n","    return au_std\n","\n","\n","#!!!!!!!!!!!!!!!!!! YÜKSEK POZİTİF KORELASYONLU AU LAR:ÇARPMA İŞLEMİ\n","def process_video3(data):\n","    # Belirtilen AU'ları al\n","    selected_aus = data[au_new_ft2]\n","\n","    # Her bir sütundaki değerleri çarp\n","    au_prod = selected_aus.prod(axis=1)  # Satır bazında çarpma işlemi\n","    # Sonucu DataFrame olarak döndür\n","    au_std = au_prod.to_frame().T  # DataFrame'e çevir ve transpoze et\n","    return au_std\n","\n","\n","\n"],"metadata":{"id":"_dUWYpnh9q-Z","executionInfo":{"status":"ok","timestamp":1728876917810,"user_tz":-180,"elapsed":2,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["# Parkinson ve sağlıklı hastalar için AU ortalamalarını ve durumlarını kaydetme\n","results = []\n","\n","for video_path in video_parkinsonspaths:\n","    au_means = process_video(video_path)\n","    au_means['label'] = 1  # Parkinson hastası\n","    au_std = process_video2(au_means)  # Standart sapmayı al\n","\n","    au_means['std'] = au_std # Sadece ilk satırı al ve ekle\n","    au_means['hgh_cor'] = process_video3(au_means)\n","\n","    print(au_means)\n","    results.append(au_means)\n","\n","#bellek zorlamasın diye kapadım\n","'''\n","for video_path in video_healthypaths:\n","    au_means = process_video(video_path)\n","    au_means['label'] = 0  # Sağlıklı birey\n","    au_std = process_video2(au_means)  # Standart sapmayı al\n","\n","    au_means['std'] = au_std # Sadece ilk satırı al ve ekle\n","    au_means['hgh_cor'] = process_video3(au_means)\n","\n","    results.append(au_means)\n","\n","'''\n","\n","# Sonuçları DataFrame'e dönüştür\n","df_results = pd.concat(results, ignore_index=True)  # Sonuçları birleştir\n","\n","#!!!!!!!!!!!!!!hata yok uyarı aldım\n","'''\n","/usr/local/lib/python3.10/dist-packages/feat/detector.py:981: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.\n","  batch_output = pd.concat(batch_output)\n","'''"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"-qUrDWb-9rA2","executionInfo":{"status":"ok","timestamp":1728889269840,"user_tz":-180,"elapsed":12352031,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"f38f3b2f-13e3-43e5-c379-2b0b1b3ce303"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 103/103 [11:30<00:00,  6.70s/it]\n"]},{"output_type":"stream","name":"stdout","text":["       AU01      AU02      AU04      AU06      AU07      AU09      AU10  \\\n","0  0.738293  0.389413  0.231525  0.216693  0.126214  0.178899  0.522281   \n","\n","       AU11      AU12      AU14  ...      AU17      AU20      AU24      AU25  \\\n","0  0.475728  0.232143  0.606474  ...  0.522637  0.019417  0.737123  0.095095   \n","\n","       AU26      AU28      AU43  label       std   hgh_cor  \n","0  0.233116  0.504048  0.029431      1  0.504927  0.544213  \n","\n","[1 rows x 21 columns]\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 133/133 [15:14<00:00,  6.88s/it]\n"]},{"output_type":"stream","name":"stdout","text":["       AU01      AU02      AU04      AU06      AU07      AU09      AU10  \\\n","0  0.512335  0.323519  0.421435  0.096714  0.330827  0.189334  0.214285   \n","\n","       AU11      AU12      AU14  ...      AU17  AU20      AU24      AU25  \\\n","0  0.037594  0.066372  0.401727  ...  0.694302   0.0  0.826103  0.033695   \n","\n","       AU26      AU28      AU43  label      std   hgh_cor  \n","0  0.281896  0.479924  0.240005      1  0.46903  0.423241  \n","\n","[1 rows x 21 columns]\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 108/108 [11:58<00:00,  6.65s/it]\n"]},{"output_type":"stream","name":"stdout","text":["       AU01      AU02     AU04      AU06      AU07      AU09      AU10  \\\n","0  0.507271  0.390975  0.18781  0.185457  0.157407  0.293513  0.093491   \n","\n","       AU11      AU12      AU14  ...      AU17     AU20      AU24      AU25  \\\n","0  0.314815  0.137494  0.309976  ...  0.528322  0.12037  0.393904  0.259486   \n","\n","      AU26      AU28      AU43  label       std   hgh_cor  \n","0  0.26653  0.126368  0.088118      1  0.508039  0.199816  \n","\n","[1 rows x 21 columns]\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 105/105 [11:30<00:00,  6.58s/it]\n"]},{"output_type":"stream","name":"stdout","text":["       AU01      AU02      AU04      AU06  AU07      AU09      AU10      AU11  \\\n","0  0.496426  0.496677  0.294108  0.074793   0.0  0.080024  0.021181  0.457143   \n","\n","       AU12      AU14  ...      AU17  AU20      AU24      AU25     AU26  \\\n","0  0.031824  0.147893  ...  0.513636   0.0  0.248289  0.149809  0.25056   \n","\n","       AU28      AU43  label       std   hgh_cor  \n","0  0.153799  0.025506      1  0.454486  0.123257  \n","\n","[1 rows x 21 columns]\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 108/108 [11:51<00:00,  6.59s/it]\n"]},{"output_type":"stream","name":"stdout","text":["       AU01     AU02      AU04      AU06      AU07      AU09      AU10  \\\n","0  0.545845  0.47924  0.221172  0.089919  0.342593  0.092107  0.096803   \n","\n","       AU11     AU12      AU14  ...      AU17  AU20      AU24    AU25  \\\n","0  0.435185  0.02322  0.243467  ...  0.611857   0.0  0.579836  0.1513   \n","\n","       AU26      AU28      AU43  label       std  hgh_cor  \n","0  0.147962  0.386458  0.066886      1  0.493686   0.3165  \n","\n","[1 rows x 21 columns]\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 104/104 [10:55<00:00,  6.30s/it]\n"]},{"output_type":"stream","name":"stdout","text":["       AU01      AU02      AU04      AU06      AU07      AU09      AU10  \\\n","0  0.640932  0.391258  0.294898  0.209641  0.442308  0.186483  0.316859   \n","\n","       AU11      AU12     AU14  ...      AU17      AU20      AU24      AU25  \\\n","0  0.403846  0.093957  0.20702  ...  0.502964  0.019231  0.297673  0.200104   \n","\n","       AU26      AU28      AU43  label       std   hgh_cor  \n","0  0.235769  0.137924  0.062784      1  0.537973  0.190788  \n","\n","[1 rows x 21 columns]\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 143/143 [16:13<00:00,  6.81s/it]\n"]},{"output_type":"stream","name":"stdout","text":["       AU01      AU02      AU04     AU06      AU07      AU09      AU10  \\\n","0  0.564352  0.267012  0.614878  0.09154  0.013986  0.167584  0.083189   \n","\n","       AU11      AU12      AU14  ...      AU17      AU20      AU24      AU25  \\\n","0  0.468531  0.030671  0.210306  ...  0.476449  0.531469  0.204061  0.929959   \n","\n","       AU26      AU28      AU43  label       std   hgh_cor  \n","0  0.384252  0.104503  0.180602      1  0.588259  0.115163  \n","\n","[1 rows x 21 columns]\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 163/163 [18:21<00:00,  6.76s/it]\n"]},{"output_type":"stream","name":"stdout","text":["       AU01      AU02      AU04      AU06      AU07      AU09      AU10  \\\n","0  0.300807  0.308086  0.463952  0.179427  0.705521  0.179809  0.530822   \n","\n","       AU11      AU12      AU14  ...      AU17     AU20      AU24      AU25  \\\n","0  0.496933  0.190135  0.577894  ...  0.566777  0.02454  0.657871  0.329427   \n","\n","       AU26      AU28     AU43  label       std   hgh_cor  \n","0  0.515576  0.390141  0.09709      1  0.598188  0.197892  \n","\n","[1 rows x 21 columns]\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 99/99 [10:48<00:00,  6.55s/it]\n"]},{"output_type":"stream","name":"stdout","text":["      AU01      AU02      AU04      AU06      AU07      AU09      AU10  \\\n","0  0.39053  0.339239  0.340376  0.157905  0.131313  0.163323  0.066634   \n","\n","       AU11      AU12      AU14  ...      AU17  AU20      AU24      AU25  \\\n","0  0.353535  0.059835  0.257976  ...  0.602059   0.0  0.459012  0.167742   \n","\n","       AU26     AU28      AU43  label       std   hgh_cor  \n","0  0.286156  0.46256  0.043495      1  0.478885  0.179258  \n","\n","[1 rows x 21 columns]\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 154/154 [17:00<00:00,  6.62s/it]\n"]},{"output_type":"stream","name":"stdout","text":["       AU01      AU02     AU04      AU06      AU07      AU09      AU10  \\\n","0  0.413715  0.180147  0.63169  0.222704  0.090909  0.289689  0.189532   \n","\n","       AU11      AU12     AU14  ...      AU17      AU20      AU24      AU25  \\\n","0  0.772727  0.093536  0.39352  ...  0.560571  0.032468  0.552023  0.304513   \n","\n","       AU26     AU28      AU43  label       std  hgh_cor  \n","0  0.316232  0.48343  0.416048      1  0.534066  0.22838  \n","\n","[1 rows x 21 columns]\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 147/147 [16:27<00:00,  6.72s/it]\n"]},{"output_type":"stream","name":"stdout","text":["       AU01      AU02      AU04      AU06      AU07      AU09      AU10  \\\n","0  0.391674  0.203304  0.736219  0.066706  0.142857  0.110075  0.019563   \n","\n","       AU11      AU12      AU14  ...      AU17  AU20     AU24     AU25  \\\n","0  0.687075  0.016682  0.130184  ...  0.562941   0.0  0.33533  0.18905   \n","\n","       AU26      AU28      AU43  label       std  hgh_cor  \n","0  0.302755  0.208057  0.066049      1  0.483574  0.13134  \n","\n","[1 rows x 21 columns]\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 115/115 [12:37<00:00,  6.59s/it]\n"]},{"output_type":"stream","name":"stdout","text":["       AU01     AU02      AU04      AU06  AU07      AU09      AU10  AU11  \\\n","0  0.552514  0.48164  0.215184  0.067918   0.0  0.090257  0.035084   1.0   \n","\n","       AU12      AU14  ...      AU17  AU20      AU24      AU25      AU26  \\\n","0  0.029307  0.155439  ...  0.600645   0.0  0.539356  0.070327  0.101934   \n","\n","      AU28      AU43  label       std   hgh_cor  \n","0  0.43087  0.065317      1  0.485313  0.298001  \n","\n","[1 rows x 21 columns]\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 131/131 [13:15<00:00,  6.07s/it]\n"]},{"output_type":"stream","name":"stdout","text":["       AU01      AU02      AU04      AU06      AU07      AU09      AU10  \\\n","0  0.550661  0.197408  0.419953  0.076951  0.053435  0.139716  0.097949   \n","\n","       AU11      AU12      AU14  ...      AU17  AU20      AU24      AU25  \\\n","0  0.259542  0.030983  0.325272  ...  0.556883   0.0  0.693823  0.201804   \n","\n","       AU26      AU28      AU43  label       std   hgh_cor  \n","0  0.457361  0.614024  0.177413      1  0.461064  0.382062  \n","\n","[1 rows x 21 columns]\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 151/151 [17:21<00:00,  6.90s/it]\n"]},{"output_type":"stream","name":"stdout","text":["      AU01      AU02      AU04      AU06  AU07      AU09      AU10      AU11  \\\n","0  0.68223  0.560531  0.368229  0.081859   0.0  0.182188  0.137883  0.615894   \n","\n","       AU12     AU14  ...      AU17  AU20      AU24      AU25      AU26  \\\n","0  0.022797  0.20419  ...  0.469778   0.0  0.332437  0.467735  0.324362   \n","\n","      AU28      AU43  label       std   hgh_cor  \n","0  0.35811  0.052383      1  0.528426  0.226799  \n","\n","[1 rows x 21 columns]\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 100/100 [10:23<00:00,  6.24s/it]\n"]},{"output_type":"stream","name":"stdout","text":["       AU01      AU02      AU04      AU06  AU07      AU09      AU10  AU11  \\\n","0  0.482421  0.370368  0.317153  0.110888  0.13  0.159486  0.210816  0.23   \n","\n","       AU12      AU14  ...      AU17  AU20      AU24      AU25      AU26  \\\n","0  0.064631  0.388526  ...  0.412903  0.64  0.254225  0.860972  0.812007   \n","\n","       AU28      AU43  label       std   hgh_cor  \n","0  0.224109  0.086359      1  0.611997  0.122643  \n","\n","[1 rows x 21 columns]\n"]},{"output_type":"execute_result","data":{"text/plain":["'\\n/usr/local/lib/python3.10/dist-packages/feat/detector.py:981: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.\\n  batch_output = pd.concat(batch_output)\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["# Excel dosyasına kaydet\n","output_excel_path = '/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/machine_learningdata_parkinsons.xlsx'\n","df_results.to_excel(output_excel_path, index=False)\n","\n","print(f\"Sonuçlar {output_excel_path} dosyasına kaydedildi.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"easD8iP29rDK","executionInfo":{"status":"ok","timestamp":1728889270617,"user_tz":-180,"elapsed":781,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"d8f9a444-a28c-48c1-c3db-27f935951825"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Sonuçlar /content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/machine_learningdata_parkinsons.xlsx dosyasına kaydedildi.\n"]}]},{"cell_type":"code","source":["print(type(df_results))\n","print(\"+++++++++++++\")\n","df_results.head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"tYcnLAyv9rFj","executionInfo":{"status":"ok","timestamp":1728889270617,"user_tz":-180,"elapsed":4,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"8582982a-fa5b-4a98-aaef-a438b289fd32"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'feat.data.Fex'>\n","+++++++++++++\n"]},{"output_type":"execute_result","data":{"text/plain":["       AU01      AU02      AU04      AU06      AU07      AU09      AU10  \\\n","0  0.738293  0.389413  0.231525  0.216693  0.126214  0.178899  0.522281   \n","1  0.512335  0.323519  0.421435  0.096714  0.330827  0.189334  0.214285   \n","2  0.507271  0.390975  0.187810  0.185457  0.157407  0.293513  0.093491   \n","3  0.496426  0.496677  0.294108  0.074793  0.000000  0.080024  0.021181   \n","4  0.545845  0.479240  0.221172  0.089919  0.342593  0.092107  0.096803   \n","\n","       AU11      AU12      AU14  ...      AU17      AU20      AU24      AU25  \\\n","0  0.475728  0.232143  0.606474  ...  0.522637  0.019417  0.737123  0.095095   \n","1  0.037594  0.066372  0.401727  ...  0.694302  0.000000  0.826103  0.033695   \n","2  0.314815  0.137494  0.309976  ...  0.528322  0.120370  0.393904  0.259486   \n","3  0.457143  0.031824  0.147893  ...  0.513636  0.000000  0.248289  0.149809   \n","4  0.435185  0.023220  0.243467  ...  0.611857  0.000000  0.579836  0.151300   \n","\n","       AU26      AU28      AU43  label       std   hgh_cor  \n","0  0.233116  0.504048  0.029431      1  0.504927  0.544213  \n","1  0.281896  0.479924  0.240005      1  0.469030  0.423241  \n","2  0.266530  0.126368  0.088118      1  0.508039  0.199816  \n","3  0.250560  0.153799  0.025506      1  0.454486  0.123257  \n","4  0.147962  0.386458  0.066886      1  0.493686  0.316500  \n","\n","[5 rows x 21 columns]"],"text/html":["\n","  <div id=\"df-6cad3abc-dbec-44bc-bf98-9fab0b3e5212\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AU01</th>\n","      <th>AU02</th>\n","      <th>AU04</th>\n","      <th>AU06</th>\n","      <th>AU07</th>\n","      <th>AU09</th>\n","      <th>AU10</th>\n","      <th>AU11</th>\n","      <th>AU12</th>\n","      <th>AU14</th>\n","      <th>...</th>\n","      <th>AU17</th>\n","      <th>AU20</th>\n","      <th>AU24</th>\n","      <th>AU25</th>\n","      <th>AU26</th>\n","      <th>AU28</th>\n","      <th>AU43</th>\n","      <th>label</th>\n","      <th>std</th>\n","      <th>hgh_cor</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.738293</td>\n","      <td>0.389413</td>\n","      <td>0.231525</td>\n","      <td>0.216693</td>\n","      <td>0.126214</td>\n","      <td>0.178899</td>\n","      <td>0.522281</td>\n","      <td>0.475728</td>\n","      <td>0.232143</td>\n","      <td>0.606474</td>\n","      <td>...</td>\n","      <td>0.522637</td>\n","      <td>0.019417</td>\n","      <td>0.737123</td>\n","      <td>0.095095</td>\n","      <td>0.233116</td>\n","      <td>0.504048</td>\n","      <td>0.029431</td>\n","      <td>1</td>\n","      <td>0.504927</td>\n","      <td>0.544213</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.512335</td>\n","      <td>0.323519</td>\n","      <td>0.421435</td>\n","      <td>0.096714</td>\n","      <td>0.330827</td>\n","      <td>0.189334</td>\n","      <td>0.214285</td>\n","      <td>0.037594</td>\n","      <td>0.066372</td>\n","      <td>0.401727</td>\n","      <td>...</td>\n","      <td>0.694302</td>\n","      <td>0.000000</td>\n","      <td>0.826103</td>\n","      <td>0.033695</td>\n","      <td>0.281896</td>\n","      <td>0.479924</td>\n","      <td>0.240005</td>\n","      <td>1</td>\n","      <td>0.469030</td>\n","      <td>0.423241</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.507271</td>\n","      <td>0.390975</td>\n","      <td>0.187810</td>\n","      <td>0.185457</td>\n","      <td>0.157407</td>\n","      <td>0.293513</td>\n","      <td>0.093491</td>\n","      <td>0.314815</td>\n","      <td>0.137494</td>\n","      <td>0.309976</td>\n","      <td>...</td>\n","      <td>0.528322</td>\n","      <td>0.120370</td>\n","      <td>0.393904</td>\n","      <td>0.259486</td>\n","      <td>0.266530</td>\n","      <td>0.126368</td>\n","      <td>0.088118</td>\n","      <td>1</td>\n","      <td>0.508039</td>\n","      <td>0.199816</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.496426</td>\n","      <td>0.496677</td>\n","      <td>0.294108</td>\n","      <td>0.074793</td>\n","      <td>0.000000</td>\n","      <td>0.080024</td>\n","      <td>0.021181</td>\n","      <td>0.457143</td>\n","      <td>0.031824</td>\n","      <td>0.147893</td>\n","      <td>...</td>\n","      <td>0.513636</td>\n","      <td>0.000000</td>\n","      <td>0.248289</td>\n","      <td>0.149809</td>\n","      <td>0.250560</td>\n","      <td>0.153799</td>\n","      <td>0.025506</td>\n","      <td>1</td>\n","      <td>0.454486</td>\n","      <td>0.123257</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.545845</td>\n","      <td>0.479240</td>\n","      <td>0.221172</td>\n","      <td>0.089919</td>\n","      <td>0.342593</td>\n","      <td>0.092107</td>\n","      <td>0.096803</td>\n","      <td>0.435185</td>\n","      <td>0.023220</td>\n","      <td>0.243467</td>\n","      <td>...</td>\n","      <td>0.611857</td>\n","      <td>0.000000</td>\n","      <td>0.579836</td>\n","      <td>0.151300</td>\n","      <td>0.147962</td>\n","      <td>0.386458</td>\n","      <td>0.066886</td>\n","      <td>1</td>\n","      <td>0.493686</td>\n","      <td>0.316500</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 21 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6cad3abc-dbec-44bc-bf98-9fab0b3e5212')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6cad3abc-dbec-44bc-bf98-9fab0b3e5212 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6cad3abc-dbec-44bc-bf98-9fab0b3e5212');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c3fc62d5-fb4f-40fb-b94f-f36e7d3d4f62\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c3fc62d5-fb4f-40fb-b94f-f36e7d3d4f62')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c3fc62d5-fb4f-40fb-b94f-f36e7d3d4f62 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_results"}},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["# Korelasyon matrisini hesapla\n","correlation_matrix = df_results.corr()\n","\n","# Label ile olan korelasyonları seç\n","label_correlation = correlation_matrix['label'].drop('label')\n","\n","# Korelasyonları çiz\n","plt.figure(figsize=(10, 6))\n","sns.barplot(x=label_correlation.index, y=label_correlation.values)\n","plt.title('AU Özelliklerinin Label ile Korelasyonu')\n","plt.xlabel('Affect Units (AU)')\n","plt.ylabel('Korelasyon')\n","plt.xticks(rotation=45)\n","plt.axhline(0, color='gray', lw=1)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"hz05A73_9rHy","executionInfo":{"status":"ok","timestamp":1728889271123,"user_tz":-180,"elapsed":508,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"56670794-8204-43b3-a165-90f9d7404dd7"},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"XkMFYgNy9rJx","executionInfo":{"status":"ok","timestamp":1728889271123,"user_tz":-180,"elapsed":6,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"pznanXkI9rMD","executionInfo":{"status":"ok","timestamp":1728889271123,"user_tz":-180,"elapsed":6,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"PS3WgIPE9rOZ","executionInfo":{"status":"ok","timestamp":1728889271123,"user_tz":-180,"elapsed":5,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"kkFEvgF09rQ1","executionInfo":{"status":"ok","timestamp":1728889271123,"user_tz":-180,"elapsed":5,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"9_FQFysf9rS9","executionInfo":{"status":"ok","timestamp":1728889271123,"user_tz":-180,"elapsed":5,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"3YTVk03m9rVK","executionInfo":{"status":"ok","timestamp":1728889271123,"user_tz":-180,"elapsed":5,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"24udgIlX9rXR","executionInfo":{"status":"ok","timestamp":1728889271123,"user_tz":-180,"elapsed":5,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"oi2oBajp9rZt","executionInfo":{"status":"ok","timestamp":1728889271123,"user_tz":-180,"elapsed":5,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"eXuUesJH9rb9","executionInfo":{"status":"ok","timestamp":1728889271123,"user_tz":-180,"elapsed":5,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"zrWUF1Ut9reR","executionInfo":{"status":"ok","timestamp":1728889271123,"user_tz":-180,"elapsed":5,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"bJKEOoh99rgs","executionInfo":{"status":"ok","timestamp":1728889271123,"user_tz":-180,"elapsed":4,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"LkQJHa4J9ri6","executionInfo":{"status":"ok","timestamp":1728889271124,"user_tz":-180,"elapsed":5,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"_yGnLVhF9rlI","executionInfo":{"status":"ok","timestamp":1728889271124,"user_tz":-180,"elapsed":5,"user":{"displayName":"asistlab","userId":"04370448145332600114"}}},"execution_count":13,"outputs":[]}]}