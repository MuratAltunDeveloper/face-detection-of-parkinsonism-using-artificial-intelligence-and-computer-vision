{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPXS7ZLeZPaBWwG4kcpxclm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"ixsJhE8sWag2"},"outputs":[],"source":["!pip install -q py-feat"]},{"cell_type":"code","source":["import os\n","from feat import Detector\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns"],"metadata":{"id":"CsDJZ-VcWb5V"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Google Drive'ındaki dosyalara erişim sağlamak için\n","from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0snIJRVsIpF2","executionInfo":{"status":"ok","timestamp":1728382598367,"user_tz":-180,"elapsed":2021,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"d8552fab-ce86-4960-f1c2-c1762d1344a9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["from feat import Detector\n","\n","'''\n","FEAT kütüphanesi, altında yatan modellerin bazıları için GPU desteği sunabilir. Özellikle retinaface, mobilefacenet,\n","resmasknet ve img2pose gibi modeller genellikle PyTorch veya TensorFlow gibi framework'ler üzerinde çalışır ve bu framework'ler GPU hızlandırmasını destekler.\n","'''\n","\n","\n","\n","detector = Detector(\n","    face_model=\"retinaface\",\n","    landmark_model=\"mobilefacenet\",\n","    au_model='xgb',#svm\n","    # AUs tespiti için XGBoost yerine derin öğrenme modeli deneyebilirsiniz\n","    # Örnek: 'deepface', 'mobilenet', 'resnet' ,'xgb' gibi\n","    emotion_model=\"resmasknet\",\n","    facepose_model=\"img2pose\",\n",")\n","\n"],"metadata":{"id":"gHUqSfJWWb7-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728382609937,"user_tz":-180,"elapsed":11572,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"658b06cc-dece-4853-cf18-c93d83e40e68"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/feat/face_detectors/Retinaface/Retinaface_test.py:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  pretrained_dict = torch.load(\n","/usr/local/lib/python3.10/dist-packages/feat/detector.py:238: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  checkpoint = torch.load(\n","/usr/local/lib/python3.10/dist-packages/feat/facepose_detectors/img2pose/img2pose_test.py:105: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  checkpoint = torch.load(model_path, map_location=self.device)\n","/usr/local/lib/python3.10/dist-packages/feat/emo_detectors/ResMaskNet/resmasknet_test.py:718: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  torch.load(\n","/usr/local/lib/python3.10/dist-packages/feat/identity_detectors/facenet/facenet_model.py:275: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  torch.load(\n"]}]},{"cell_type":"code","source":["# Video yolları\n","healthy_video_path2 = \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy/output.mp4\"\n","healthy_video_path = \"/content/drive/MyDrive/ASISTLAB_ARTIFICAL/tubitak_2209/dataset/healthy/output_1.mp4\""],"metadata":{"id":"6VYnuNqsWb-g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","def process_video(video_path):\n","    # Videoyu işle\n","    #skip_frames parametresini 1 olarak ayarlarsam, bu durumda her bir frame işlenir. Yani, videodaki her kare ayrı ayrı analiz edilir.\n","    predictions = detector.detect_video(video_path, skip_frames=4)\n","\n","    # İlgilendiğimiz AU'ları seç\n","    #au_columns = ['AU01', 'AU02', 'AU04', 'AU05', 'AU06', 'AU12', 'AU25', 'AU26', 'AU27', 'AU43', 'AU45']\n","    au_columns =['AU01', 'AU02', 'AU04', 'AU05', 'AU06', 'AU12', 'AU25', 'AU26', 'AU43']\n","    au_data = predictions[au_columns]\n","\n","    # Her AU için ortalama değeri hesapla\n","    au_means = au_data.mean()\n","\n","    return au_means\n"],"metadata":{"id":"j8DymU3ZWcBE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Her iki video için AU değerlerini hesapla\n","healthy_au2 = process_video(healthy_video_path2)\n","healthy_au = process_video(healthy_video_path)\n","\n","# Sonuçları bir DataFrame'e dönüştür\n","results = pd.DataFrame({\n","    'Healthy2': healthy_au2,\n","    'Healthy': healthy_au\n","})\n","#: Her iki video için AUs değerlerini içeren bir DataFrame oluşturur. İki sütun içerir: Healthy2 ve Healthy."],"metadata":{"id":"KsmWm6DMWcDy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728383868286,"user_tz":-180,"elapsed":1258361,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"b816fb0f-1cb5-4e0b-abae-c3933277b643"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 94/94 [10:36<00:00,  6.77s/it]\n","100%|██████████| 100/100 [10:19<00:00,  6.19s/it]\n"]}]},{"cell_type":"code","source":["\n","# Grafiği oluştur\n","plt.figure(figsize=(12, 6))\n","sns.barplot(data=results)\n","\n","# Grafiğin başlık ve etiketlerini ayarla\n","plt.title('AU Karşılaştırması')\n","plt.xlabel('Affect Units (AUs)')\n","plt.ylabel('Ortalama Değerler')\n","plt.xticks(rotation=45)\n","plt.legend(title='Videolar', loc='upper right')\n","plt.grid(axis='y')\n","\n","# Grafiği göster\n","plt.tight_layout()\n","plt.show()"],"metadata":{"id":"dM5a6nu-WcGK","colab":{"base_uri":"https://localhost:8080/","height":718},"executionInfo":{"status":"ok","timestamp":1728383868738,"user_tz":-180,"elapsed":462,"user":{"displayName":"asistlab","userId":"04370448145332600114"}},"outputId":"ffd01fcd-c252-43f9-b87d-560acf8e783b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/seaborn/_base.py:949: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n","  data_subset = grouped_data.get_group(pd_key)\n","/usr/local/lib/python3.10/dist-packages/seaborn/_base.py:949: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n","  data_subset = grouped_data.get_group(pd_key)\n","WARNING:matplotlib.legend:No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"i6nBiauCWcIy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"J94ugAB9WcLN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"GnYqvA9JWcNe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"dGKdWJiJWcP-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"GWisIAk4WcST"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"vkhMfKggWcUt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"WADt-TRlWcXC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"4SDqF5cGWcZV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"PDmrqpd7Wcby"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"K65wietKWceG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"z5h8CVRrWcge"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"24nkQDoGWcjn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"ywXcb_l9WctT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"BOq3n8aiWcwB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"NcIsiOhsWcyf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"yU0gGzo7Wc05"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"46YzmDPnWc4C"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"yXUbj1aiWc6i"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"vhKTEiHaWc8-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"yxFKZVk5Wc_a"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"hF1mS5VCWdEK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Ommc3iDeWdGm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"6NaCcVFQWdI0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"iVW2oHYEWdLK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"ggHiX2gPWdNq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"YBWeRXmMWdQP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"lUiPLnkwWdS-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"z55aUGTVWdVa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"frNKhkrmWdXy"},"execution_count":null,"outputs":[]}]}